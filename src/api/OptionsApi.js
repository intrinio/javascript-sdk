/**
 * Intrinio API
 * Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://docs.intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.101.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponseOptionPrices', 'model/ApiResponseOptions', 'model/ApiResponseOptionsAggregates', 'model/ApiResponseOptionsChain', 'model/ApiResponseOptionsChainEod', 'model/ApiResponseOptionsChainRealtime', 'model/ApiResponseOptionsExpirations', 'model/ApiResponseOptionsGreekContractRealtime', 'model/ApiResponseOptionsGreeksByTickerRealtime', 'model/ApiResponseOptionsImpliedMove', 'model/ApiResponseOptionsPriceRealtime', 'model/ApiResponseOptionsPricesBatchRealtime', 'model/ApiResponseOptionsPricesByTickerEod', 'model/ApiResponseOptionsPricesByTickerRealtime', 'model/ApiResponseOptionsPricesEod', 'model/ApiResponseOptionsRealtime', 'model/ApiResponseOptionsStatsRealtime', 'model/ApiResponseOptionsTickers', 'model/ApiResponseOptionsUnusualActivity', 'model/OptionContractsList', 'model/OptionIntervalsMoversResult', 'model/OptionIntervalsResult', 'model/OptionSnapshotsResult', 'model/OptionTradesResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponseOptionPrices'), require('../model/ApiResponseOptions'), require('../model/ApiResponseOptionsAggregates'), require('../model/ApiResponseOptionsChain'), require('../model/ApiResponseOptionsChainEod'), require('../model/ApiResponseOptionsChainRealtime'), require('../model/ApiResponseOptionsExpirations'), require('../model/ApiResponseOptionsGreekContractRealtime'), require('../model/ApiResponseOptionsGreeksByTickerRealtime'), require('../model/ApiResponseOptionsImpliedMove'), require('../model/ApiResponseOptionsPriceRealtime'), require('../model/ApiResponseOptionsPricesBatchRealtime'), require('../model/ApiResponseOptionsPricesByTickerEod'), require('../model/ApiResponseOptionsPricesByTickerRealtime'), require('../model/ApiResponseOptionsPricesEod'), require('../model/ApiResponseOptionsRealtime'), require('../model/ApiResponseOptionsStatsRealtime'), require('../model/ApiResponseOptionsTickers'), require('../model/ApiResponseOptionsUnusualActivity'), require('../model/OptionContractsList'), require('../model/OptionIntervalsMoversResult'), require('../model/OptionIntervalsResult'), require('../model/OptionSnapshotsResult'), require('../model/OptionTradesResult'));
  } else {
    // Browser globals (root is window)
    if (!root.intrinioSDK) {
      root.intrinioSDK = {};
    }
    root.intrinioSDK.OptionsApi = factory(root.intrinioSDK.ApiClient, root.intrinioSDK.ApiResponseOptionPrices, root.intrinioSDK.ApiResponseOptions, root.intrinioSDK.ApiResponseOptionsAggregates, root.intrinioSDK.ApiResponseOptionsChain, root.intrinioSDK.ApiResponseOptionsChainEod, root.intrinioSDK.ApiResponseOptionsChainRealtime, root.intrinioSDK.ApiResponseOptionsExpirations, root.intrinioSDK.ApiResponseOptionsGreekContractRealtime, root.intrinioSDK.ApiResponseOptionsGreeksByTickerRealtime, root.intrinioSDK.ApiResponseOptionsImpliedMove, root.intrinioSDK.ApiResponseOptionsPriceRealtime, root.intrinioSDK.ApiResponseOptionsPricesBatchRealtime, root.intrinioSDK.ApiResponseOptionsPricesByTickerEod, root.intrinioSDK.ApiResponseOptionsPricesByTickerRealtime, root.intrinioSDK.ApiResponseOptionsPricesEod, root.intrinioSDK.ApiResponseOptionsRealtime, root.intrinioSDK.ApiResponseOptionsStatsRealtime, root.intrinioSDK.ApiResponseOptionsTickers, root.intrinioSDK.ApiResponseOptionsUnusualActivity, root.intrinioSDK.OptionContractsList, root.intrinioSDK.OptionIntervalsMoversResult, root.intrinioSDK.OptionIntervalsResult, root.intrinioSDK.OptionSnapshotsResult, root.intrinioSDK.OptionTradesResult);
  }
}(this, function(ApiClient, ApiResponseOptionPrices, ApiResponseOptions, ApiResponseOptionsAggregates, ApiResponseOptionsChain, ApiResponseOptionsChainEod, ApiResponseOptionsChainRealtime, ApiResponseOptionsExpirations, ApiResponseOptionsGreekContractRealtime, ApiResponseOptionsGreeksByTickerRealtime, ApiResponseOptionsImpliedMove, ApiResponseOptionsPriceRealtime, ApiResponseOptionsPricesBatchRealtime, ApiResponseOptionsPricesByTickerEod, ApiResponseOptionsPricesByTickerRealtime, ApiResponseOptionsPricesEod, ApiResponseOptionsRealtime, ApiResponseOptionsStatsRealtime, ApiResponseOptionsTickers, ApiResponseOptionsUnusualActivity, OptionContractsList, OptionIntervalsMoversResult, OptionIntervalsResult, OptionSnapshotsResult, OptionTradesResult) {
  'use strict';

  /**
   * Options service.
   * @module api/OptionsApi
   * @version 6.38.0
   */

  /**
   * Constructs a new OptionsApi. 
   * @alias module:api/OptionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
    const MAX_RETRY_MILLISECONDS = 60000;
    


    /**
     * Options Tickers
     * Returns all tickers that have existing options contracts.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.useUnderlyingSymbols Use underlying symbol vs contract symbol (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsTickers} and HTTP response
     */
    this.getAllOptionsTickersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'use_underlying_symbols': opts['useUnderlyingSymbols'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsTickers;
      var endpoint = '/options/tickers'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Tickers
     * Returns all tickers that have existing options contracts.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.useUnderlyingSymbols Use underlying symbol vs contract symbol (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsTickers}
     */
    this.getAllOptionsTickers = function(opts) {
      return this.getAllOptionsTickersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Total open interest and volume aggregated by ticker
     * Returns total open interest and volume by ticker
     * @param {Object} opts Optional parameters
     * @param {Object} opts.date Return aggregated data for this date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsAggregates} and HTTP response
     */
    this.getOptionAggregatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'date': opts['date'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsAggregates;
      var endpoint = '/options/aggregates'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Total open interest and volume aggregated by ticker
     * Returns total open interest and volume by ticker
     * @param {Object} opts Optional parameters
     * @param {Object} opts.date Return aggregated data for this date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsAggregates}
     */
    this.getOptionAggregates = function(opts) {
      return this.getOptionAggregatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Expirations
     * Returns a list of all current and upcoming option contract expiration dates for a particular symbol.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {String} opts.after Return option contract expiration dates after this date.
     * @param {String} opts.before Return option contract expiration dates before this date.
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsExpirations} and HTTP response
     */
    this.getOptionExpirationsRealtimeWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionExpirationsRealtime");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'after': opts['after'],
        'before': opts['before'],
        'source': opts['source'],
        'include_related_symbols': opts['includeRelatedSymbols'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsExpirations;
      var endpoint = '/options/expirations/{symbol}/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Expirations
     * Returns a list of all current and upcoming option contract expiration dates for a particular symbol.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {String} opts.after Return option contract expiration dates after this date.
     * @param {String} opts.before Return option contract expiration dates before this date.
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsExpirations}
     */
    this.getOptionExpirationsRealtime = function(symbol, opts) {
      return this.getOptionExpirationsRealtimeWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Strikes Realtime
     * Returns a list of the latest top of the order book size and premium (bid / ask), the latest trade size and premium as well as the greeks and implied volatility for all call/put contracts that match the strike and symbol specified.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Number} strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or delayed.
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {module:model/String} opts.model Model for calculating Greek values. Default is black_scholes.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsChainRealtime} and HTTP response
     */
    this.getOptionStrikesRealtimeWithHttpInfo = function(symbol, strike, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionStrikesRealtime");
      }

      // verify the required parameter 'strike' is set
      if (strike === undefined || strike === null) {
        throw new Error("Missing the required parameter 'strike' when calling getOptionStrikesRealtime");
      }


      var pathParams = {
        'symbol': symbol,
        'strike': strike
      };
      var queryParams = {
        'source': opts['source'],
        'stock_price_source': opts['stockPriceSource'],
        'model': opts['model'],
        'show_extended_price': opts['showExtendedPrice'],
        'include_related_symbols': opts['includeRelatedSymbols'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsChainRealtime;
      var endpoint = '/options/strikes/{symbol}/{strike}/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Strikes Realtime
     * Returns a list of the latest top of the order book size and premium (bid / ask), the latest trade size and premium as well as the greeks and implied volatility for all call/put contracts that match the strike and symbol specified.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Number} strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or delayed.
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {module:model/String} opts.model Model for calculating Greek values. Default is black_scholes.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsChainRealtime}
     */
    this.getOptionStrikesRealtime = function(symbol, strike, opts) {
      return this.getOptionStrikesRealtimeWithHttpInfo(symbol, strike, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Trades
     * Returns all trades between start time and end time, up to seven days ago for the specified source.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source The specific source of the data being requested.
     * @param {Date} opts.startDate The start date for the data being requested.
     * @param {String} opts.startTime The start time for the data being requested.
     * @param {Date} opts.endDate The end date for the data being requested.
     * @param {String} opts.endTime The end time for the data being requested.
     * @param {module:model/String} opts.timezone The timezone the start and end date/times use. (default to UTC)
     * @param {Number} opts.pageSize The maximum number of results to return per page. (default to 100)
     * @param {Number} opts.minSize Trades must be larger or equal to this size.
     * @param {String} opts.security The ticker symbol for which trades are being requested.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OptionTradesResult} and HTTP response
     */
    this.getOptionTradesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'source': opts['source'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'timezone': opts['timezone'],
        'page_size': opts['pageSize'],
        'min_size': opts['minSize'],
        'security': opts['security'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OptionTradesResult;
      var endpoint = '/options/trades'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Trades
     * Returns all trades between start time and end time, up to seven days ago for the specified source.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source The specific source of the data being requested.
     * @param {Date} opts.startDate The start date for the data being requested.
     * @param {String} opts.startTime The start time for the data being requested.
     * @param {Date} opts.endDate The end date for the data being requested.
     * @param {String} opts.endTime The end time for the data being requested.
     * @param {module:model/String} opts.timezone The timezone the start and end date/times use. (default to UTC)
     * @param {Number} opts.pageSize The maximum number of results to return per page. (default to 100)
     * @param {Number} opts.minSize Trades must be larger or equal to this size.
     * @param {String} opts.security The ticker symbol for which trades are being requested.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OptionTradesResult}
     */
    this.getOptionTrades = function(opts) {
      return this.getOptionTradesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Trades By Contract
     * Returns all trades for a contract between start time and end time, up to seven days ago for the specified source.
     * @param {String} identifier The option contract for which trades are being requested.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source The specific source of the data being requested.
     * @param {Date} opts.startDate The start date for the data being requested.
     * @param {String} opts.startTime The start time for the data being requested.
     * @param {Date} opts.endDate The end date for the data being requested.
     * @param {String} opts.endTime The end time for the data being requested.
     * @param {module:model/String} opts.timezone The timezone the start and end date/times use. (default to UTC)
     * @param {Number} opts.pageSize The maximum number of results to return per page. (default to 100)
     * @param {Number} opts.minSize Trades must be larger or equal to this size.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OptionTradesResult} and HTTP response
     */
    this.getOptionTradesByContractWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getOptionTradesByContract");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'source': opts['source'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'timezone': opts['timezone'],
        'page_size': opts['pageSize'],
        'min_size': opts['minSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OptionTradesResult;
      var endpoint = '/options/{identifier}/trades'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Trades By Contract
     * Returns all trades for a contract between start time and end time, up to seven days ago for the specified source.
     * @param {String} identifier The option contract for which trades are being requested.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source The specific source of the data being requested.
     * @param {Date} opts.startDate The start date for the data being requested.
     * @param {String} opts.startTime The start time for the data being requested.
     * @param {Date} opts.endDate The end date for the data being requested.
     * @param {String} opts.endTime The end time for the data being requested.
     * @param {module:model/String} opts.timezone The timezone the start and end date/times use. (default to UTC)
     * @param {Number} opts.pageSize The maximum number of results to return per page. (default to 100)
     * @param {Number} opts.minSize Trades must be larger or equal to this size.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OptionTradesResult}
     */
    this.getOptionTradesByContract = function(identifier, opts) {
      return this.getOptionTradesByContractWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options
     * Returns a list of all securities that have options listed and are tradable on a US market exchange. Useful to retrieve the entire universe.  Available via a 3rd party, contact sales for a trial.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {String} opts.expiration The expiration date of the option contract. This will return options contracts with expiration dates on this date.
     * @param {String} opts.expirationAfter The expiration date of the option contract. This will return options contracts with expiration dates after this date.
     * @param {String} opts.expirationBefore The expiration date of the option contract. This will return options contracts with expiration dates before this date.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptions} and HTTP response
     */
    this.getOptionsWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptions");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'type': opts['type'],
        'strike': opts['strike'],
        'strike_greater_than': opts['strikeGreaterThan'],
        'strike_less_than': opts['strikeLessThan'],
        'expiration': opts['expiration'],
        'expiration_after': opts['expirationAfter'],
        'expiration_before': opts['expirationBefore'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptions;
      var endpoint = '/options/{symbol}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options
     * Returns a list of all securities that have options listed and are tradable on a US market exchange. Useful to retrieve the entire universe.  Available via a 3rd party, contact sales for a trial.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {String} opts.expiration The expiration date of the option contract. This will return options contracts with expiration dates on this date.
     * @param {String} opts.expirationAfter The expiration date of the option contract. This will return options contracts with expiration dates after this date.
     * @param {String} opts.expirationBefore The expiration date of the option contract. This will return options contracts with expiration dates before this date.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptions}
     */
    this.getOptions = function(symbol, opts) {
      return this.getOptionsWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options by Symbol Realtime
     * Returns a list of all securities that have options listed and are tradable on a US market exchange. Useful to retrieve the entire universe.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {String} opts.expiration The expiration date of the option contract. This will return options contracts with expiration dates on this date.
     * @param {String} opts.expirationAfter The expiration date of the option contract. This will return options contracts with expiration dates after this date.
     * @param {String} opts.expirationBefore The expiration date of the option contract. This will return options contracts with expiration dates before this date.
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsRealtime} and HTTP response
     */
    this.getOptionsBySymbolRealtimeWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsBySymbolRealtime");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'type': opts['type'],
        'strike': opts['strike'],
        'strike_greater_than': opts['strikeGreaterThan'],
        'strike_less_than': opts['strikeLessThan'],
        'expiration': opts['expiration'],
        'expiration_after': opts['expirationAfter'],
        'expiration_before': opts['expirationBefore'],
        'source': opts['source'],
        'include_related_symbols': opts['includeRelatedSymbols'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsRealtime;
      var endpoint = '/options/{symbol}/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options by Symbol Realtime
     * Returns a list of all securities that have options listed and are tradable on a US market exchange. Useful to retrieve the entire universe.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {String} opts.expiration The expiration date of the option contract. This will return options contracts with expiration dates on this date.
     * @param {String} opts.expirationAfter The expiration date of the option contract. This will return options contracts with expiration dates after this date.
     * @param {String} opts.expirationBefore The expiration date of the option contract. This will return options contracts with expiration dates before this date.
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsRealtime}
     */
    this.getOptionsBySymbolRealtime = function(symbol, opts) {
      return this.getOptionsBySymbolRealtimeWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Chain
     * Returns a list of the historical end-of-day top of the order book size and premium (bid / ask), the latest trade size and premium as well as the greeks and implied volatility for all option contracts currently associated with the option chain.  Available via a 3rd party, contact sales for a trial.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {String} expiration The expiration date of the options contract
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date The date of the option price. Returns option prices on this date.
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {module:model/String} opts.moneyness The moneyness of the options contracts to return. &#39;all&#39; will return all options contracts. &#39;in_the_money&#39; will return options contracts that are in the money (call options with strike prices below the current price, put options with strike prices above the current price). &#39;out_of_they_money&#39; will return options contracts that are out of the money (call options with strike prices above the current price, put options with strike prices below the current price). &#39;near_the_money&#39; will return options contracts that are $0.50 or less away from being in the money.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsChain} and HTTP response
     */
    this.getOptionsChainWithHttpInfo = function(symbol, expiration, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsChain");
      }

      // verify the required parameter 'expiration' is set
      if (expiration === undefined || expiration === null) {
        throw new Error("Missing the required parameter 'expiration' when calling getOptionsChain");
      }


      var pathParams = {
        'symbol': symbol,
        'expiration': expiration
      };
      var queryParams = {
        'date': opts['date'],
        'type': opts['type'],
        'strike': opts['strike'],
        'strike_greater_than': opts['strikeGreaterThan'],
        'strike_less_than': opts['strikeLessThan'],
        'moneyness': opts['moneyness'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsChain;
      var endpoint = '/options/chain/{symbol}/{expiration}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Chain
     * Returns a list of the historical end-of-day top of the order book size and premium (bid / ask), the latest trade size and premium as well as the greeks and implied volatility for all option contracts currently associated with the option chain.  Available via a 3rd party, contact sales for a trial.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {String} expiration The expiration date of the options contract
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date The date of the option price. Returns option prices on this date.
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {module:model/String} opts.moneyness The moneyness of the options contracts to return. &#39;all&#39; will return all options contracts. &#39;in_the_money&#39; will return options contracts that are in the money (call options with strike prices below the current price, put options with strike prices above the current price). &#39;out_of_they_money&#39; will return options contracts that are out of the money (call options with strike prices above the current price, put options with strike prices below the current price). &#39;near_the_money&#39; will return options contracts that are $0.50 or less away from being in the money.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsChain}
     */
    this.getOptionsChain = function(symbol, expiration, opts) {
      return this.getOptionsChainWithHttpInfo(symbol, expiration, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Chain EOD
     * Returns all EOD options contracts and their prices for the given symbol and expiration date.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {String} expiration The expiration date of the options contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {Date} opts.date The date to retrieve prices for
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsChainEod} and HTTP response
     */
    this.getOptionsChainEodWithHttpInfo = function(symbol, expiration, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsChainEod");
      }

      // verify the required parameter 'expiration' is set
      if (expiration === undefined || expiration === null) {
        throw new Error("Missing the required parameter 'expiration' when calling getOptionsChainEod");
      }


      var pathParams = {
        'symbol': symbol,
        'expiration': expiration
      };
      var queryParams = {
        'type': opts['type'],
        'strike': opts['strike'],
        'strike_greater_than': opts['strikeGreaterThan'],
        'strike_less_than': opts['strikeLessThan'],
        'date': opts['date'],
        'include_related_symbols': opts['includeRelatedSymbols'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsChainEod;
      var endpoint = '/options/chain/{symbol}/{expiration}/eod'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Chain EOD
     * Returns all EOD options contracts and their prices for the given symbol and expiration date.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {String} expiration The expiration date of the options contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {Date} opts.date The date to retrieve prices for
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsChainEod}
     */
    this.getOptionsChainEod = function(symbol, expiration, opts) {
      return this.getOptionsChainEodWithHttpInfo(symbol, expiration, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Chain Realtime
     * Returns a list of the latest National Best Bid &amp; Offer (NBBO) top of the order book size and premium (bid / ask), the latest trade size and premium as well as the greeks and implied volatility for all option contracts currently associated with the option chain.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {String} expiration The expiration date of the options contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {Number} opts.volumeGreaterThan The volume of the option contract. This will return options contracts with volumes greater than this amount.
     * @param {Number} opts.volumeLessThan The volume of the option contract. This will return options contracts with volumes less than this amout.
     * @param {Number} opts.openInterestGreaterThan The open interest of the option contract. This will return options contracts with open interest greater than this amount.
     * @param {Number} opts.openInterestLessThan The open interest of the option contract. This will return options contracts with open interest less than this amount.
     * @param {module:model/String} opts.moneyness The moneyness of the options contracts to return. &#39;all&#39; will return all options contracts. &#39;in_the_money&#39; will return options contracts that are in the money (call options with strike prices below the current price, put options with strike prices above the current price). &#39;out_of_they_money&#39; will return options contracts that are out of the money (call options with strike prices above the current price, put options with strike prices below the current price). &#39;near_the_money&#39; will return options contracts that are $0.50 or less away from being in the money.  Requires subscription to realtime stock price data.
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {module:model/String} opts.model Model for calculating Greek values. Default is black_scholes.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsChainRealtime} and HTTP response
     */
    this.getOptionsChainRealtimeWithHttpInfo = function(symbol, expiration, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsChainRealtime");
      }

      // verify the required parameter 'expiration' is set
      if (expiration === undefined || expiration === null) {
        throw new Error("Missing the required parameter 'expiration' when calling getOptionsChainRealtime");
      }


      var pathParams = {
        'symbol': symbol,
        'expiration': expiration
      };
      var queryParams = {
        'source': opts['source'],
        'type': opts['type'],
        'strike': opts['strike'],
        'strike_greater_than': opts['strikeGreaterThan'],
        'strike_less_than': opts['strikeLessThan'],
        'volume_greater_than': opts['volumeGreaterThan'],
        'volume_less_than': opts['volumeLessThan'],
        'open_interest_greater_than': opts['openInterestGreaterThan'],
        'open_interest_less_than': opts['openInterestLessThan'],
        'moneyness': opts['moneyness'],
        'stock_price_source': opts['stockPriceSource'],
        'model': opts['model'],
        'show_extended_price': opts['showExtendedPrice'],
        'include_related_symbols': opts['includeRelatedSymbols'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsChainRealtime;
      var endpoint = '/options/chain/{symbol}/{expiration}/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Chain Realtime
     * Returns a list of the latest National Best Bid &amp; Offer (NBBO) top of the order book size and premium (bid / ask), the latest trade size and premium as well as the greeks and implied volatility for all option contracts currently associated with the option chain.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {String} expiration The expiration date of the options contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {Number} opts.volumeGreaterThan The volume of the option contract. This will return options contracts with volumes greater than this amount.
     * @param {Number} opts.volumeLessThan The volume of the option contract. This will return options contracts with volumes less than this amout.
     * @param {Number} opts.openInterestGreaterThan The open interest of the option contract. This will return options contracts with open interest greater than this amount.
     * @param {Number} opts.openInterestLessThan The open interest of the option contract. This will return options contracts with open interest less than this amount.
     * @param {module:model/String} opts.moneyness The moneyness of the options contracts to return. &#39;all&#39; will return all options contracts. &#39;in_the_money&#39; will return options contracts that are in the money (call options with strike prices below the current price, put options with strike prices above the current price). &#39;out_of_they_money&#39; will return options contracts that are out of the money (call options with strike prices above the current price, put options with strike prices below the current price). &#39;near_the_money&#39; will return options contracts that are $0.50 or less away from being in the money.  Requires subscription to realtime stock price data.
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {module:model/String} opts.model Model for calculating Greek values. Default is black_scholes.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsChainRealtime}
     */
    this.getOptionsChainRealtime = function(symbol, expiration, opts) {
      return this.getOptionsChainRealtimeWithHttpInfo(symbol, expiration, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Expirations
     * Returns a list of all current and upcoming option contract expiration dates for a particular symbol.  Available via a 3rd party, contact sales for a trial.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {String} opts.after Return option contract expiration dates after this date.
     * @param {String} opts.before Return option contract expiration dates before this date.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsExpirations} and HTTP response
     */
    this.getOptionsExpirationsWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsExpirations");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'after': opts['after'],
        'before': opts['before'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsExpirations;
      var endpoint = '/options/expirations/{symbol}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Expirations
     * Returns a list of all current and upcoming option contract expiration dates for a particular symbol.  Available via a 3rd party, contact sales for a trial.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {String} opts.after Return option contract expiration dates after this date.
     * @param {String} opts.before Return option contract expiration dates before this date.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsExpirations}
     */
    this.getOptionsExpirations = function(symbol, opts) {
      return this.getOptionsExpirationsWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Expirations
     * Returns a list of all current and upcoming option contract expiration dates for a particular symbol.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {String} opts.after Return option contract expiration dates after this date.
     * @param {String} opts.before Return option contract expiration dates before this date.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsExpirations} and HTTP response
     */
    this.getOptionsExpirationsEodWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsExpirationsEod");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'after': opts['after'],
        'before': opts['before'],
        'include_related_symbols': opts['includeRelatedSymbols'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsExpirations;
      var endpoint = '/options/expirations/{symbol}/eod'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Expirations
     * Returns a list of all current and upcoming option contract expiration dates for a particular symbol.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {String} opts.after Return option contract expiration dates after this date.
     * @param {String} opts.before Return option contract expiration dates before this date.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsExpirations}
     */
    this.getOptionsExpirationsEod = function(symbol, opts) {
      return this.getOptionsExpirationsEodWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Get realtime options greeks for a specific contract
     * Retrieves realtime options greeks data for a specific options contract
     * @param {String} contract The options contract identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source The data source to use for options data
     * @param {module:model/String} opts.model The options pricing model to use for greeks calculations (default to black_scholes)
     * @param {module:model/String} opts.ivMode The implied volatility calculation mode
     * @param {module:model/String} opts.stockPriceSource The data source to use for underlying stock prices
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsGreekContractRealtime} and HTTP response
     */
    this.getOptionsGreeksByContractWithHttpInfo = function(contract, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contract' is set
      if (contract === undefined || contract === null) {
        throw new Error("Missing the required parameter 'contract' when calling getOptionsGreeksByContract");
      }


      var pathParams = {
        'contract': contract
      };
      var queryParams = {
        'source': opts['source'],
        'model': opts['model'],
        'iv_mode': opts['ivMode'],
        'stock_price_source': opts['stockPriceSource'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsGreekContractRealtime;
      var endpoint = '/options/greeks/{contract}/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Get realtime options greeks for a specific contract
     * Retrieves realtime options greeks data for a specific options contract
     * @param {String} contract The options contract identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source The data source to use for options data
     * @param {module:model/String} opts.model The options pricing model to use for greeks calculations (default to black_scholes)
     * @param {module:model/String} opts.ivMode The implied volatility calculation mode
     * @param {module:model/String} opts.stockPriceSource The data source to use for underlying stock prices
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsGreekContractRealtime}
     */
    this.getOptionsGreeksByContract = function(contract, opts) {
      return this.getOptionsGreeksByContractWithHttpInfo(contract, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Get realtime options greeks by ticker
     * Retrieves realtime options greeks data for all contracts of a given ticker symbol
     * @param {String} identifier The ticker symbol to get options greeks for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source The data source to use for options data
     * @param {module:model/String} opts.model The options pricing model to use for greeks calculations (default to black_scholes)
     * @param {module:model/String} opts.ivMode The implied volatility calculation mode
     * @param {module:model/String} opts.stockPriceSource The data source to use for underlying stock prices
     * @param {Date} opts.expirationStartDate Filter options by expiration date (start)
     * @param {Date} opts.expirationEndDate Filter options by expiration date (end)
     * @param {Number} opts.strike Filter options by strike price
     * @param {Number} opts.strikeGreaterThan Filter options by minimum strike price
     * @param {Number} opts.strikeLessThan Filter options by maximum strike price
     * @param {Number} opts.pageSize Number of results to return per page (default to 250)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsGreeksByTickerRealtime} and HTTP response
     */
    this.getOptionsGreeksByTickerWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getOptionsGreeksByTicker");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'source': opts['source'],
        'model': opts['model'],
        'iv_mode': opts['ivMode'],
        'stock_price_source': opts['stockPriceSource'],
        'expiration_start_date': opts['expirationStartDate'],
        'expiration_end_date': opts['expirationEndDate'],
        'strike': opts['strike'],
        'strike_greater_than': opts['strikeGreaterThan'],
        'strike_less_than': opts['strikeLessThan'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsGreeksByTickerRealtime;
      var endpoint = '/options/greeks/by_ticker/{identifier}/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Get realtime options greeks by ticker
     * Retrieves realtime options greeks data for all contracts of a given ticker symbol
     * @param {String} identifier The ticker symbol to get options greeks for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source The data source to use for options data
     * @param {module:model/String} opts.model The options pricing model to use for greeks calculations (default to black_scholes)
     * @param {module:model/String} opts.ivMode The implied volatility calculation mode
     * @param {module:model/String} opts.stockPriceSource The data source to use for underlying stock prices
     * @param {Date} opts.expirationStartDate Filter options by expiration date (start)
     * @param {Date} opts.expirationEndDate Filter options by expiration date (end)
     * @param {Number} opts.strike Filter options by strike price
     * @param {Number} opts.strikeGreaterThan Filter options by minimum strike price
     * @param {Number} opts.strikeLessThan Filter options by maximum strike price
     * @param {Number} opts.pageSize Number of results to return per page (default to 250)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsGreeksByTickerRealtime}
     */
    this.getOptionsGreeksByTicker = function(identifier, opts) {
      return this.getOptionsGreeksByTickerWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Implied Move By Symbol
     * Returns the implied move data points for a ticker symbol.
     * @param {String} symbol The ticker symbol for the contracts.
     * @param {Date} expirationDate The expiration date for the contracts to consider.
     * @param {Object} opts Optional parameters
     * @param {Object} opts.percentage Percentage to multiply the straddle by. Defaults to 0.85.
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsImpliedMove} and HTTP response
     */
    this.getOptionsImpliedMoveBySymbolWithHttpInfo = function(symbol, expirationDate, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsImpliedMoveBySymbol");
      }

      // verify the required parameter 'expirationDate' is set
      if (expirationDate === undefined || expirationDate === null) {
        throw new Error("Missing the required parameter 'expirationDate' when calling getOptionsImpliedMoveBySymbol");
      }


      var pathParams = {
        'symbol': symbol,
        'expiration_date': expirationDate
      };
      var queryParams = {
        'percentage': opts['percentage'],
        'source': opts['source'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsImpliedMove;
      var endpoint = '/options/implied_move/{symbol}/{expiration_date}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Implied Move By Symbol
     * Returns the implied move data points for a ticker symbol.
     * @param {String} symbol The ticker symbol for the contracts.
     * @param {Date} expirationDate The expiration date for the contracts to consider.
     * @param {Object} opts Optional parameters
     * @param {Object} opts.percentage Percentage to multiply the straddle by. Defaults to 0.85.
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsImpliedMove}
     */
    this.getOptionsImpliedMoveBySymbol = function(symbol, expirationDate, opts) {
      return this.getOptionsImpliedMoveBySymbolWithHttpInfo(symbol, expirationDate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Intervals By Contract
     * Returns a list of interval data points for a contract.
     * @param {String} identifier The Intrinio ID or code of the options contract to request intervals for.
     * @param {module:model/String} intervalSize The time length of the interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {Date} opts.endTime The inclusive UTC date and time the intervals end at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OptionIntervalsResult} and HTTP response
     */
    this.getOptionsIntervalByContractWithHttpInfo = function(identifier, intervalSize, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getOptionsIntervalByContract");
      }

      // verify the required parameter 'intervalSize' is set
      if (intervalSize === undefined || intervalSize === null) {
        throw new Error("Missing the required parameter 'intervalSize' when calling getOptionsIntervalByContract");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'interval_size': intervalSize,
        'source': opts['source'],
        'page_size': opts['pageSize'],
        'end_time': opts['endTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OptionIntervalsResult;
      var endpoint = '/options/interval/{identifier}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Intervals By Contract
     * Returns a list of interval data points for a contract.
     * @param {String} identifier The Intrinio ID or code of the options contract to request intervals for.
     * @param {module:model/String} intervalSize The time length of the interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {Date} opts.endTime The inclusive UTC date and time the intervals end at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OptionIntervalsResult}
     */
    this.getOptionsIntervalByContract = function(identifier, intervalSize, opts) {
      return this.getOptionsIntervalByContractWithHttpInfo(identifier, intervalSize, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Intervals Movers
     * Returns a list of intervals for the biggest movers over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OptionIntervalsMoversResult} and HTTP response
     */
    this.getOptionsIntervalMoversWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'source': opts['source'],
        'open_time': opts['openTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OptionIntervalsMoversResult;
      var endpoint = '/options/interval/movers'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Intervals Movers
     * Returns a list of intervals for the biggest movers over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OptionIntervalsMoversResult}
     */
    this.getOptionsIntervalMovers = function(opts) {
      return this.getOptionsIntervalMoversWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Intervals Movers By Change
     * Returns a list of intervals for the biggest movers by change over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OptionIntervalsMoversResult} and HTTP response
     */
    this.getOptionsIntervalMoversChangeWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'source': opts['source'],
        'open_time': opts['openTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OptionIntervalsMoversResult;
      var endpoint = '/options/interval/movers/change'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Intervals Movers By Change
     * Returns a list of intervals for the biggest movers by change over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OptionIntervalsMoversResult}
     */
    this.getOptionsIntervalMoversChange = function(opts) {
      return this.getOptionsIntervalMoversChangeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Intervals Movers By Volume
     * Returns a list of intervals for the biggest movers by volume over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OptionIntervalsMoversResult} and HTTP response
     */
    this.getOptionsIntervalMoversVolumeWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'source': opts['source'],
        'open_time': opts['openTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OptionIntervalsMoversResult;
      var endpoint = '/options/interval/movers/volume'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Intervals Movers By Volume
     * Returns a list of intervals for the biggest movers by volume over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OptionIntervalsMoversResult}
     */
    this.getOptionsIntervalMoversVolume = function(opts) {
      return this.getOptionsIntervalMoversVolumeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Prices
     * Returns all price data from inception to expiration for a particular contract.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return option contract prices on or after this date.
     * @param {String} opts.endDate Return option contract prices on or before this date.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionPrices} and HTTP response
     */
    this.getOptionsPricesWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getOptionsPrices");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionPrices;
      var endpoint = '/options/prices/{identifier}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Prices
     * Returns all price data from inception to expiration for a particular contract.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return option contract prices on or after this date.
     * @param {String} opts.endDate Return option contract prices on or before this date.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionPrices}
     */
    this.getOptionsPrices = function(identifier, opts) {
      return this.getOptionsPricesWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Prices Batch Realtime
     * Returns a list of latest price data for up to 250 option contracts per request.
     * @param {module:model/OptionContractsList} body The contract symbols for which to return options prices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Boolean} opts.showStats Whether to include Greek calculations or not.
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {module:model/String} opts.model Model for calculating Greek values. Default is black_scholes.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsPricesBatchRealtime} and HTTP response
     */
    this.getOptionsPricesBatchRealtimeWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getOptionsPricesBatchRealtime");
      }


      var pathParams = {
      };
      var queryParams = {
        'source': opts['source'],
        'show_stats': opts['showStats'],
        'stock_price_source': opts['stockPriceSource'],
        'model': opts['model'],
        'show_extended_price': opts['showExtendedPrice'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsPricesBatchRealtime;
      var endpoint = '/options/prices/realtime/batch'
      var method = 'POST'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Prices Batch Realtime
     * Returns a list of latest price data for up to 250 option contracts per request.
     * @param {module:model/OptionContractsList} body The contract symbols for which to return options prices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Boolean} opts.showStats Whether to include Greek calculations or not.
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {module:model/String} opts.model Model for calculating Greek values. Default is black_scholes.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsPricesBatchRealtime}
     */
    this.getOptionsPricesBatchRealtime = function(body, opts) {
      return this.getOptionsPricesBatchRealtimeWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Prices EOD
     * Returns all option prices for a given option contract identifier.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @param {Date} opts.startDate The start date to retrieve prices for
     * @param {Date} opts.endDate The end date to retrieve prices for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsPricesEod} and HTTP response
     */
    this.getOptionsPricesEodWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getOptionsPricesEod");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'next_page': opts['nextPage'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsPricesEod;
      var endpoint = '/options/prices/{identifier}/eod'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Prices EOD
     * Returns all option prices for a given option contract identifier.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @param {Date} opts.startDate The start date to retrieve prices for
     * @param {Date} opts.endDate The end date to retrieve prices for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsPricesEod}
     */
    this.getOptionsPricesEod = function(identifier, opts) {
      return this.getOptionsPricesEodWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Prices End of Day By Ticker
     * Returns a list of end of day pricing information for all option contracts currently associated with the ticker.
     * @param {String} symbol The equities ticker symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of results to return (default to 250)
     * @param {Object} opts.date The date to get pricing data for. Defaults to today in Eastern time zone.
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsPricesByTickerEod} and HTTP response
     */
    this.getOptionsPricesEodByTickerWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsPricesEodByTicker");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'page_size': opts['pageSize'],
        'date': opts['date'],
        'type': opts['type'],
        'strike': opts['strike'],
        'strike_greater_than': opts['strikeGreaterThan'],
        'strike_less_than': opts['strikeLessThan'],
        'include_related_symbols': opts['includeRelatedSymbols'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsPricesByTickerEod;
      var endpoint = '/options/prices/by_ticker/{symbol}/eod'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Prices End of Day By Ticker
     * Returns a list of end of day pricing information for all option contracts currently associated with the ticker.
     * @param {String} symbol The equities ticker symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of results to return (default to 250)
     * @param {Object} opts.date The date to get pricing data for. Defaults to today in Eastern time zone.
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {Boolean} opts.includeRelatedSymbols Include related symbols that end in a 1 or 2 because of a corporate action.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsPricesByTickerEod}
     */
    this.getOptionsPricesEodByTicker = function(symbol, opts) {
      return this.getOptionsPricesEodByTickerWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Prices Realtime
     * Returns all option prices for a given option contract identifier.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {module:model/String} opts.model Model for calculating Greek values. Default is black_scholes.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsPriceRealtime} and HTTP response
     */
    this.getOptionsPricesRealtimeWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getOptionsPricesRealtime");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'source': opts['source'],
        'stock_price_source': opts['stockPriceSource'],
        'model': opts['model'],
        'show_extended_price': opts['showExtendedPrice'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsPriceRealtime;
      var endpoint = '/options/prices/{identifier}/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Prices Realtime
     * Returns all option prices for a given option contract identifier.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {module:model/String} opts.model Model for calculating Greek values. Default is black_scholes.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsPriceRealtime}
     */
    this.getOptionsPricesRealtime = function(identifier, opts) {
      return this.getOptionsPricesRealtimeWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Prices Realtime By Ticker
     * Returns a list of the latest National Best Bid &amp; Offer (NBBO) top of the order book size and premium (bid / ask), the latest trade size and premium as well as the greeks and implied volatility for all option contracts currently associated with the ticker.
     * @param {String} symbol The equities ticker symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {module:model/String} opts.ivMode Change the mode for the implied volatility calculation to out of the money.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @param {Number} opts.pageSize The number of results to return (default to 250)
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {module:model/String} opts.model Model for calculating Greek values. Default is black_scholes.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @param {Object} opts.expirationStartDate Filter out contracts that expire before this date.
     * @param {Object} opts.expirationEndDate Filter out contracts that expire after this date.
     * @param {Number} opts.strike Filter out contracts that have this strike price.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsPricesByTickerRealtime} and HTTP response
     */
    this.getOptionsPricesRealtimeByTickerWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsPricesRealtimeByTicker");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'source': opts['source'],
        'iv_mode': opts['ivMode'],
        'next_page': opts['nextPage'],
        'page_size': opts['pageSize'],
        'stock_price_source': opts['stockPriceSource'],
        'model': opts['model'],
        'show_extended_price': opts['showExtendedPrice'],
        'expiration_start_date': opts['expirationStartDate'],
        'expiration_end_date': opts['expirationEndDate'],
        'strike': opts['strike'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsPricesByTickerRealtime;
      var endpoint = '/options/prices/by_ticker/{symbol}/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Prices Realtime By Ticker
     * Returns a list of the latest National Best Bid &amp; Offer (NBBO) top of the order book size and premium (bid / ask), the latest trade size and premium as well as the greeks and implied volatility for all option contracts currently associated with the ticker.
     * @param {String} symbol The equities ticker symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {module:model/String} opts.ivMode Change the mode for the implied volatility calculation to out of the money.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @param {Number} opts.pageSize The number of results to return (default to 250)
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {module:model/String} opts.model Model for calculating Greek values. Default is black_scholes.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @param {Object} opts.expirationStartDate Filter out contracts that expire before this date.
     * @param {Object} opts.expirationEndDate Filter out contracts that expire after this date.
     * @param {Number} opts.strike Filter out contracts that have this strike price.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsPricesByTickerRealtime}
     */
    this.getOptionsPricesRealtimeByTicker = function(symbol, opts) {
      return this.getOptionsPricesRealtimeByTickerWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Prices Realtime Snapshot
     * Returns all options snapshots for the queried interval with links to download.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.atDatetime The UTC date and time (with url-encoded spaces) the snapshot will cover.
     * @param {Boolean} opts.withGreeks Whether to include Greek calculations fields when available.
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {Boolean} opts.withUnderlyingPrice Whether to include the underlying price of the security in the file.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OptionSnapshotsResult} and HTTP response
     */
    this.getOptionsSnapshotsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'source': opts['source'],
        'at_datetime': opts['atDatetime'],
        'with_greeks': opts['withGreeks'],
        'stock_price_source': opts['stockPriceSource'],
        'with_underlying_price': opts['withUnderlyingPrice'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OptionSnapshotsResult;
      var endpoint = '/options/snapshots'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Prices Realtime Snapshot
     * Returns all options snapshots for the queried interval with links to download.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.atDatetime The UTC date and time (with url-encoded spaces) the snapshot will cover.
     * @param {Boolean} opts.withGreeks Whether to include Greek calculations fields when available.
     * @param {module:model/String} opts.stockPriceSource Source for underlying price for calculating Greeks.
     * @param {Boolean} opts.withUnderlyingPrice Whether to include the underlying price of the security in the file.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OptionSnapshotsResult}
     */
    this.getOptionsSnapshots = function(opts) {
      return this.getOptionsSnapshotsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Stats Realtime
     * Returns all option stats (greeks and implied volatility) as well as the underlying factors used to calculate them, for a particular option contract.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsStatsRealtime} and HTTP response
     */
    this.getOptionsStatsRealtimeWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getOptionsStatsRealtime");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'source': opts['source'],
        'show_extended_price': opts['showExtendedPrice'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsStatsRealtime;
      var endpoint = '/options/prices/{identifier}/realtime/stats'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Stats Realtime
     * Returns all option stats (greeks and implied volatility) as well as the underlying factors used to calculate them, for a particular option contract.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Boolean} opts.showExtendedPrice Whether to include open close high low type fields.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsStatsRealtime}
     */
    this.getOptionsStatsRealtime = function(identifier, opts) {
      return this.getOptionsStatsRealtimeWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Unusual Activity
     * Returns unusual options activity for a particular company across all option chains. Unusual options activity includes large trades, sweeps, and block trades.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsUnusualActivity} and HTTP response
     */
    this.getUnusualActivityWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getUnusualActivity");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'source': opts['source'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsUnusualActivity;
      var endpoint = '/options/unusual_activity/{symbol}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Unusual Activity
     * Returns unusual options activity for a particular company across all option chains. Unusual options activity includes large trades, sweeps, and block trades.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsUnusualActivity}
     */
    this.getUnusualActivity = function(symbol, opts) {
      return this.getUnusualActivityWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Unusual Activity Intraday
     * Returns unusual trades for a given identifier within the query parameters.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @param {Number} opts.pageSize The number of results to return (default to 1000)
     * @param {module:model/String} opts.activityType The unusual activity type to query for.
     * @param {module:model/String} opts.sentiment The sentiment type to query for.
     * @param {Date} opts.startDate Return unusual activity on or after this date.
     * @param {Date} opts.endDate Return unusual activity before this date.
     * @param {Object} opts.minimumTotalValue The inclusive minimum total value for the unusual activity.
     * @param {Object} opts.maximumTotalValue The inclusive maximum total value for the unusual activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsUnusualActivity} and HTTP response
     */
    this.getUnusualActivityIntradayWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getUnusualActivityIntraday");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'next_page': opts['nextPage'],
        'page_size': opts['pageSize'],
        'activity_type': opts['activityType'],
        'sentiment': opts['sentiment'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'minimum_total_value': opts['minimumTotalValue'],
        'maximum_total_value': opts['maximumTotalValue'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsUnusualActivity;
      var endpoint = '/options/unusual_activity/{symbol}/intraday'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Unusual Activity Intraday
     * Returns unusual trades for a given identifier within the query parameters.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @param {Number} opts.pageSize The number of results to return (default to 1000)
     * @param {module:model/String} opts.activityType The unusual activity type to query for.
     * @param {module:model/String} opts.sentiment The sentiment type to query for.
     * @param {Date} opts.startDate Return unusual activity on or after this date.
     * @param {Date} opts.endDate Return unusual activity before this date.
     * @param {Object} opts.minimumTotalValue The inclusive minimum total value for the unusual activity.
     * @param {Object} opts.maximumTotalValue The inclusive maximum total value for the unusual activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsUnusualActivity}
     */
    this.getUnusualActivityIntraday = function(symbol, opts) {
      return this.getUnusualActivityIntradayWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Unusual Activity Universal
     * Returns the latest unusual options activity across all US companies with across all option chains. Unusual options activity includes large trades, sweeps, and block trades.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsUnusualActivity} and HTTP response
     */
    this.getUnusualActivityUniversalWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'source': opts['source'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsUnusualActivity;
      var endpoint = '/options/unusual_activity'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Unusual Activity Universal
     * Returns the latest unusual options activity across all US companies with across all option chains. Unusual options activity includes large trades, sweeps, and block trades.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsUnusualActivity}
     */
    this.getUnusualActivityUniversal = function(opts) {
      return this.getUnusualActivityUniversalWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Unusual Activity Universal Intraday
     * Returns unusual trades for all underlying security symbols within the query parameters.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @param {Number} opts.pageSize The number of results to return (default to 1000)
     * @param {module:model/String} opts.activityType The unusual activity type to query for.
     * @param {module:model/String} opts.sentiment The sentiment type to query for.
     * @param {Date} opts.startDate Return unusual activity on or after this date.
     * @param {Date} opts.endDate Return unusual activity before this date.
     * @param {Object} opts.minimumTotalValue The inclusive minimum total value for the unusual activity.
     * @param {Object} opts.maximumTotalValue The inclusive maximum total value for the unusual activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsUnusualActivity} and HTTP response
     */
    this.getUnusualActivityUniversalIntradayWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'next_page': opts['nextPage'],
        'page_size': opts['pageSize'],
        'activity_type': opts['activityType'],
        'sentiment': opts['sentiment'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'minimum_total_value': opts['minimumTotalValue'],
        'maximum_total_value': opts['maximumTotalValue'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsUnusualActivity;
      var endpoint = '/options/unusual_activity/intraday'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Unusual Activity Universal Intraday
     * Returns unusual trades for all underlying security symbols within the query parameters.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @param {Number} opts.pageSize The number of results to return (default to 1000)
     * @param {module:model/String} opts.activityType The unusual activity type to query for.
     * @param {module:model/String} opts.sentiment The sentiment type to query for.
     * @param {Date} opts.startDate Return unusual activity on or after this date.
     * @param {Date} opts.endDate Return unusual activity before this date.
     * @param {Object} opts.minimumTotalValue The inclusive minimum total value for the unusual activity.
     * @param {Object} opts.maximumTotalValue The inclusive maximum total value for the unusual activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsUnusualActivity}
     */
    this.getUnusualActivityUniversalIntraday = function(opts) {
      return this.getUnusualActivityUniversalIntradayWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    this.makeApiCall = function(parameters) {
      const retry = require('async-retry')
      
      const { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType } = parameters;
      
      async function makeApiRequest(intrinioSDK) {
        let response = intrinioSDK.apiClient.callApi(
          endpoint, method,
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType
        );
        return response
      }
      
      var retryAmount = 0;
      if (this.apiClient.enableRetries == true) {
        retryAmount = 5;
      }
      
      return retry((bail, attempt) => {
          return new Promise((resolve, reject) => {
            var req = makeApiRequest(this, bail);
            
            req.then((response) => {
              resolve(response);
            })
            .catch((error) => {
              // OpenAPI parses the "less than" sign uniquely. Logic below is alternate logic to remedy this.
              var isClientError = error.status >= 400 && !(error.status >= 500);
              
              // Check for rate limit header. Bail if it is greater than the max allotted retry, otherwise run a loop until the rate limit resets 
              // Do not retry on all other 400 errors
              if (error.status == 429) {
                var rateLimitMilliSeconds = error.response.headers['retry-after'] * 1000;
                
                if (rateLimitMilliSeconds > MAX_RETRY_MILLISECONDS) {
                  resolve(bail(error));
                }
                
                setTimeout(() => {
                  reject(error);
                }, rateLimitMilliSeconds);
              } else if (isClientError) {
                resolve(bail(error));
              } else {
                reject(error);
              }
            });
            
          })
      }, {
        minTimeout: 1000,
        maxTimeout: MAX_RETRY_MILLISECONDS,
        randomize: true,
        retries: retryAmount,
        factor: 1
      }).then((response) => {
        return response;
      })
    }
  };
  
  return exports;
}));
