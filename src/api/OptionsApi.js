/**
 * Intrinio API
 * Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.17.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponseOptionPrices', 'model/ApiResponseOptions', 'model/ApiResponseOptionsChain', 'model/ApiResponseOptionsChainRealtime', 'model/ApiResponseOptionsExpirations', 'model/ApiResponseOptionsPriceRealtime', 'model/ApiResponseOptionsStatsRealtime'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponseOptionPrices'), require('../model/ApiResponseOptions'), require('../model/ApiResponseOptionsChain'), require('../model/ApiResponseOptionsChainRealtime'), require('../model/ApiResponseOptionsExpirations'), require('../model/ApiResponseOptionsPriceRealtime'), require('../model/ApiResponseOptionsStatsRealtime'));
  } else {
    // Browser globals (root is window)
    if (!root.intrinioSDK) {
      root.intrinioSDK = {};
    }
    root.intrinioSDK.OptionsApi = factory(root.intrinioSDK.ApiClient, root.intrinioSDK.ApiResponseOptionPrices, root.intrinioSDK.ApiResponseOptions, root.intrinioSDK.ApiResponseOptionsChain, root.intrinioSDK.ApiResponseOptionsChainRealtime, root.intrinioSDK.ApiResponseOptionsExpirations, root.intrinioSDK.ApiResponseOptionsPriceRealtime, root.intrinioSDK.ApiResponseOptionsStatsRealtime);
  }
}(this, function(ApiClient, ApiResponseOptionPrices, ApiResponseOptions, ApiResponseOptionsChain, ApiResponseOptionsChainRealtime, ApiResponseOptionsExpirations, ApiResponseOptionsPriceRealtime, ApiResponseOptionsStatsRealtime) {
  'use strict';

  /**
   * Options service.
   * @module api/OptionsApi
   * @version 5.7.0
   */

  /**
   * Constructs a new OptionsApi. 
   * @alias module:api/OptionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
    const MAX_RETRY_MILLISECONDS = 60000;
    


    /**
     * Options
     * Returns the master list of option contracts for a given symbol.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {String} opts.expiration The expiration date of the option contract. This will return options contracts with expiration dates on this date.
     * @param {String} opts.expirationAfter The expiration date of the option contract. This will return options contracts with expiration dates after this date.
     * @param {String} opts.expirationBefore The expiration date of the option contract. This will return options contracts with expiration dates before this date.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptions} and HTTP response
     */
    this.getOptionsWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptions");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'type': opts['type'],
        'strike': opts['strike'],
        'strike_greater_than': opts['strikeGreaterThan'],
        'strike_less_than': opts['strikeLessThan'],
        'expiration': opts['expiration'],
        'expiration_after': opts['expirationAfter'],
        'expiration_before': opts['expirationBefore'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptions;
      var endpoint = '/options/{symbol}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options
     * Returns the master list of option contracts for a given symbol.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {String} opts.expiration The expiration date of the option contract. This will return options contracts with expiration dates on this date.
     * @param {String} opts.expirationAfter The expiration date of the option contract. This will return options contracts with expiration dates after this date.
     * @param {String} opts.expirationBefore The expiration date of the option contract. This will return options contracts with expiration dates before this date.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptions}
     */
    this.getOptions = function(symbol, opts) {
      return this.getOptionsWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Chain
     * Returns all options contracts and their prices for the given symbol and expiration date.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {String} expiration The expiration date of the options contract
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date The date of the option price. Returns option prices on this date.
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {module:model/String} opts.moneyness The moneyness of the options contracts to return. &#39;all&#39; will return all options contracts. &#39;in_the_money&#39; will return options contracts that are in the money (call options with strike prices below the current price, put options with strike prices above the current price). &#39;out_of_they_money&#39; will return options contracts that are out of the money (call options with strike prices above the current price, put options with strike prices below the current price). &#39;near_the_money&#39; will return options contracts that are $0.50 or less away from being in the money.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsChain} and HTTP response
     */
    this.getOptionsChainWithHttpInfo = function(symbol, expiration, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsChain");
      }

      // verify the required parameter 'expiration' is set
      if (expiration === undefined || expiration === null) {
        throw new Error("Missing the required parameter 'expiration' when calling getOptionsChain");
      }


      var pathParams = {
        'symbol': symbol,
        'expiration': expiration
      };
      var queryParams = {
        'date': opts['date'],
        'type': opts['type'],
        'strike': opts['strike'],
        'strike_greater_than': opts['strikeGreaterThan'],
        'strike_less_than': opts['strikeLessThan'],
        'moneyness': opts['moneyness'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsChain;
      var endpoint = '/options/chain/{symbol}/{expiration}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Chain
     * Returns all options contracts and their prices for the given symbol and expiration date.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {String} expiration The expiration date of the options contract
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date The date of the option price. Returns option prices on this date.
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {module:model/String} opts.moneyness The moneyness of the options contracts to return. &#39;all&#39; will return all options contracts. &#39;in_the_money&#39; will return options contracts that are in the money (call options with strike prices below the current price, put options with strike prices above the current price). &#39;out_of_they_money&#39; will return options contracts that are out of the money (call options with strike prices above the current price, put options with strike prices below the current price). &#39;near_the_money&#39; will return options contracts that are $0.50 or less away from being in the money.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsChain}
     */
    this.getOptionsChain = function(symbol, expiration, opts) {
      return this.getOptionsChainWithHttpInfo(symbol, expiration, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Chain Realtime
     * Returns all realtime options contracts and their prices for the given symbol and expiration date.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {String} expiration The expiration date of the options contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {Number} opts.volumeGreaterThan The volume of the option contract. This will return options contracts with volumes greater than this amount.
     * @param {Number} opts.volumeLessThan The volume of the option contract. This will return options contracts with volumes less than this amout.
     * @param {Number} opts.openInterestGreaterThan The open interest of the option contract. This will return options contracts with open interest greater than this amount.
     * @param {Number} opts.openInterestLessThan The open interest of the option contract. This will return options contracts with open interest less than this amount.
     * @param {module:model/String} opts.moneyness The moneyness of the options contracts to return. &#39;all&#39; will return all options contracts. &#39;in_the_money&#39; will return options contracts that are in the money (call options with strike prices below the current price, put options with strike prices above the current price). &#39;out_of_they_money&#39; will return options contracts that are out of the money (call options with strike prices above the current price, put options with strike prices below the current price). &#39;near_the_money&#39; will return options contracts that are $0.50 or less away from being in the money.  Requires subscription to realtime stock price data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsChainRealtime} and HTTP response
     */
    this.getOptionsChainRealtimeWithHttpInfo = function(symbol, expiration, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsChainRealtime");
      }

      // verify the required parameter 'expiration' is set
      if (expiration === undefined || expiration === null) {
        throw new Error("Missing the required parameter 'expiration' when calling getOptionsChainRealtime");
      }


      var pathParams = {
        'symbol': symbol,
        'expiration': expiration
      };
      var queryParams = {
        'source': opts['source'],
        'type': opts['type'],
        'strike': opts['strike'],
        'strike_greater_than': opts['strikeGreaterThan'],
        'strike_less_than': opts['strikeLessThan'],
        'volume_greater_than': opts['volumeGreaterThan'],
        'volume_less_than': opts['volumeLessThan'],
        'open_interest_greater_than': opts['openInterestGreaterThan'],
        'open_interest_less_than': opts['openInterestLessThan'],
        'moneyness': opts['moneyness'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsChainRealtime;
      var endpoint = '/options/chain/{symbol}/{expiration}/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Chain Realtime
     * Returns all realtime options contracts and their prices for the given symbol and expiration date.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {String} expiration The expiration date of the options contract
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {module:model/String} opts.type The option contract type.
     * @param {Number} opts.strike The strike price of the option contract. This will return options contracts with strike price equal to this price.
     * @param {Number} opts.strikeGreaterThan The strike price of the option contract. This will return options contracts with strike prices greater than this price.
     * @param {Number} opts.strikeLessThan The strike price of the option contract. This will return options contracts with strike prices less than this price.
     * @param {Number} opts.volumeGreaterThan The volume of the option contract. This will return options contracts with volumes greater than this amount.
     * @param {Number} opts.volumeLessThan The volume of the option contract. This will return options contracts with volumes less than this amout.
     * @param {Number} opts.openInterestGreaterThan The open interest of the option contract. This will return options contracts with open interest greater than this amount.
     * @param {Number} opts.openInterestLessThan The open interest of the option contract. This will return options contracts with open interest less than this amount.
     * @param {module:model/String} opts.moneyness The moneyness of the options contracts to return. &#39;all&#39; will return all options contracts. &#39;in_the_money&#39; will return options contracts that are in the money (call options with strike prices below the current price, put options with strike prices above the current price). &#39;out_of_they_money&#39; will return options contracts that are out of the money (call options with strike prices above the current price, put options with strike prices below the current price). &#39;near_the_money&#39; will return options contracts that are $0.50 or less away from being in the money.  Requires subscription to realtime stock price data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsChainRealtime}
     */
    this.getOptionsChainRealtime = function(symbol, expiration, opts) {
      return this.getOptionsChainRealtimeWithHttpInfo(symbol, expiration, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Options Expirations
     * Returns all option contract expiration dates for a given symbol.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {String} opts.after Return option contract expiration dates after this date.
     * @param {String} opts.before Return option contract expiration dates before this date.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsExpirations} and HTTP response
     */
    this.getOptionsExpirationsWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getOptionsExpirations");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'after': opts['after'],
        'before': opts['before'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsExpirations;
      var endpoint = '/options/expirations/{symbol}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Options Expirations
     * Returns all option contract expiration dates for a given symbol.
     * @param {String} symbol The option symbol, corresponding to the underlying security.
     * @param {Object} opts Optional parameters
     * @param {String} opts.after Return option contract expiration dates after this date.
     * @param {String} opts.before Return option contract expiration dates before this date.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsExpirations}
     */
    this.getOptionsExpirations = function(symbol, opts) {
      return this.getOptionsExpirationsWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Prices
     * Returns all option prices for a given option contract identifier.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return option contract prices on or after this date.
     * @param {String} opts.endDate Return option contract prices on or before this date.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionPrices} and HTTP response
     */
    this.getOptionsPricesWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getOptionsPrices");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionPrices;
      var endpoint = '/options/prices/{identifier}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Prices
     * Returns all option prices for a given option contract identifier.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return option contract prices on or after this date.
     * @param {String} opts.endDate Return option contract prices on or before this date.
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionPrices}
     */
    this.getOptionsPrices = function(identifier, opts) {
      return this.getOptionsPricesWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Prices Realtime
     * Returns all option prices for a given option contract identifier.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsPriceRealtime} and HTTP response
     */
    this.getOptionsPricesRealtimeWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getOptionsPricesRealtime");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'source': opts['source'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsPriceRealtime;
      var endpoint = '/options/prices/{identifier}/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Prices Realtime
     * Returns all option prices for a given option contract identifier.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsPriceRealtime}
     */
    this.getOptionsPricesRealtime = function(identifier, opts) {
      return this.getOptionsPricesRealtimeWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Option Stats Realtime
     * Returns all option stats (greeks and implied volatility) and factors used to calculate them, for a given option contract identifier.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseOptionsStatsRealtime} and HTTP response
     */
    this.getOptionsStatsRealtimeWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getOptionsStatsRealtime");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'source': opts['source'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseOptionsStatsRealtime;
      var endpoint = '/options/prices/{identifier}/realtime/stats'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Option Stats Realtime
     * Returns all option stats (greeks and implied volatility) and factors used to calculate them, for a given option contract identifier.
     * @param {String} identifier The Intrinio ID or code of the options contract to request prices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseOptionsStatsRealtime}
     */
    this.getOptionsStatsRealtime = function(identifier, opts) {
      return this.getOptionsStatsRealtimeWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    this.makeApiCall = function(parameters) {
      const retry = require('async-retry')
      
      const { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType } = parameters;
      
      async function makeApiRequest(intrinioSDK) {
        let response = intrinioSDK.apiClient.callApi(
          endpoint, method,
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType
        );
        return response
      }
      
      var retryAmount = 0;
      if (this.apiClient.enableRetries == true) {
        retryAmount = 5;
      }
      
      return retry((bail, attempt) => {
          return new Promise((resolve, reject) => {
            var req = makeApiRequest(this, bail);
            
            req.then((response) => {
              resolve(response);
            })
            .catch((error) => {
              // OpenAPI parses the "less than" sign uniquely. Logic below is alternate logic to remedy this.
              var isClientError = error.status >= 400 && !(error.status >= 500);
              
              // Check for rate limit header. Bail if it is greater than the max allotted retry, otherwise run a loop until the rate limit resets 
              // Do not retry on all other 400 errors
              if (error.status == 429) {
                var rateLimitMilliSeconds = error.response.headers['retry-after'] * 1000;
                
                if (rateLimitMilliSeconds > MAX_RETRY_MILLISECONDS) {
                  resolve(bail(error));
                }
                
                setTimeout(() => {
                  reject(error);
                }, rateLimitMilliSeconds);
              } else if (isClientError) {
                resolve(bail(error));
              } else {
                reject(error);
              }
            });
            
          })
      }, {
        minTimeout: 1000,
        maxTimeout: MAX_RETRY_MILLISECONDS,
        randomize: true,
        retries: retryAmount,
        factor: 1
      }).then((response) => {
        return response;
      })
    }
  };
  
  return exports;
}));
