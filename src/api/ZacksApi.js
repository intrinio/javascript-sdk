/**
 * Intrinio API
 * Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.17.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponseZacksAnalystRatings', 'model/ApiResponseZacksEPSEstimates', 'model/ApiResponseZacksEPSGrowthRates', 'model/ApiResponseZacksEPSSurprises', 'model/ApiResponseZacksETFHoldings', 'model/ApiResponseZacksInstitutionalHoldingCompanies', 'model/ApiResponseZacksInstitutionalHoldingOwners', 'model/ApiResponseZacksInstitutionalHoldings', 'model/ApiResponseZacksLongTermGrowthRates', 'model/ApiResponseZacksSalesSurprises', 'model/ApiResponseZacksTargetPriceConsensuses'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponseZacksAnalystRatings'), require('../model/ApiResponseZacksEPSEstimates'), require('../model/ApiResponseZacksEPSGrowthRates'), require('../model/ApiResponseZacksEPSSurprises'), require('../model/ApiResponseZacksETFHoldings'), require('../model/ApiResponseZacksInstitutionalHoldingCompanies'), require('../model/ApiResponseZacksInstitutionalHoldingOwners'), require('../model/ApiResponseZacksInstitutionalHoldings'), require('../model/ApiResponseZacksLongTermGrowthRates'), require('../model/ApiResponseZacksSalesSurprises'), require('../model/ApiResponseZacksTargetPriceConsensuses'));
  } else {
    // Browser globals (root is window)
    if (!root.intrinioSDK) {
      root.intrinioSDK = {};
    }
    root.intrinioSDK.ZacksApi = factory(root.intrinioSDK.ApiClient, root.intrinioSDK.ApiResponseZacksAnalystRatings, root.intrinioSDK.ApiResponseZacksEPSEstimates, root.intrinioSDK.ApiResponseZacksEPSGrowthRates, root.intrinioSDK.ApiResponseZacksEPSSurprises, root.intrinioSDK.ApiResponseZacksETFHoldings, root.intrinioSDK.ApiResponseZacksInstitutionalHoldingCompanies, root.intrinioSDK.ApiResponseZacksInstitutionalHoldingOwners, root.intrinioSDK.ApiResponseZacksInstitutionalHoldings, root.intrinioSDK.ApiResponseZacksLongTermGrowthRates, root.intrinioSDK.ApiResponseZacksSalesSurprises, root.intrinioSDK.ApiResponseZacksTargetPriceConsensuses);
  }
}(this, function(ApiClient, ApiResponseZacksAnalystRatings, ApiResponseZacksEPSEstimates, ApiResponseZacksEPSGrowthRates, ApiResponseZacksEPSSurprises, ApiResponseZacksETFHoldings, ApiResponseZacksInstitutionalHoldingCompanies, ApiResponseZacksInstitutionalHoldingOwners, ApiResponseZacksInstitutionalHoldings, ApiResponseZacksLongTermGrowthRates, ApiResponseZacksSalesSurprises, ApiResponseZacksTargetPriceConsensuses) {
  'use strict';

  /**
   * Zacks service.
   * @module api/ZacksApi
   * @version 5.7.0
   */

  /**
   * Constructs a new ZacksApi. 
   * @alias module:api/ZacksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
    const MAX_RETRY_MILLISECONDS = 60000;
    


    /**
     * Zacks Analyst Ratings
     * Returns buy, sell, and hold recommendations from analysts at brokerages for all companies in the Zacks universe. Zack’s storied research team aggregates and validates the ratings from professional analysts.
     * @param {Object} opts Optional parameters
     * @param {String} opts.identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Date} opts.startDate Limit ratings to those on or after this date
     * @param {Date} opts.endDate Limit ratings to those on or before this date
     * @param {Number} opts.meanGreater Return only records with a mean (average) higher than this value
     * @param {Number} opts.meanLess Return only records with a mean (average) lower than this value
     * @param {Number} opts.strongBuysGreater Return only records with more than this many Strong Buy recommendations
     * @param {Number} opts.strongBuysLess Return only records with fewer than this many Strong Buy recommendations
     * @param {Number} opts.buysGreater Return only records with more than this many Buy recommendations
     * @param {Number} opts.buysLess Return only records with fewer than this many Buy recommendations
     * @param {Number} opts.holdsGreater Return only records with more than this many Hold recommendations
     * @param {Number} opts.holdsLess Return only records with fewer than this many Hold recommendations
     * @param {Number} opts.sellsGreater Return only records with more than this many Sell recommendations
     * @param {Number} opts.sellsLess Return only records with fewer than this many Sell recommendations
     * @param {Number} opts.strongSellsGreater Return only records with more than this many Strong Sell recommendations
     * @param {Number} opts.strongSellsLess Return only records with fewer than this many Strong Sell recommendations
     * @param {Number} opts.totalGreater Return only records with more than this many recommendations, regardless of type
     * @param {Number} opts.totalLess Return only records with fewer than this many recommendations, regardless of type
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksAnalystRatings} and HTTP response
     */
    this.getZacksAnalystRatingsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'identifier': opts['identifier'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'mean_greater': opts['meanGreater'],
        'mean_less': opts['meanLess'],
        'strong_buys_greater': opts['strongBuysGreater'],
        'strong_buys_less': opts['strongBuysLess'],
        'buys_greater': opts['buysGreater'],
        'buys_less': opts['buysLess'],
        'holds_greater': opts['holdsGreater'],
        'holds_less': opts['holdsLess'],
        'sells_greater': opts['sellsGreater'],
        'sells_less': opts['sellsLess'],
        'strong_sells_greater': opts['strongSellsGreater'],
        'strong_sells_less': opts['strongSellsLess'],
        'total_greater': opts['totalGreater'],
        'total_less': opts['totalLess'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksAnalystRatings;
      var endpoint = '/zacks/analyst_ratings'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks Analyst Ratings
     * Returns buy, sell, and hold recommendations from analysts at brokerages for all companies in the Zacks universe. Zack’s storied research team aggregates and validates the ratings from professional analysts.
     * @param {Object} opts Optional parameters
     * @param {String} opts.identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Date} opts.startDate Limit ratings to those on or after this date
     * @param {Date} opts.endDate Limit ratings to those on or before this date
     * @param {Number} opts.meanGreater Return only records with a mean (average) higher than this value
     * @param {Number} opts.meanLess Return only records with a mean (average) lower than this value
     * @param {Number} opts.strongBuysGreater Return only records with more than this many Strong Buy recommendations
     * @param {Number} opts.strongBuysLess Return only records with fewer than this many Strong Buy recommendations
     * @param {Number} opts.buysGreater Return only records with more than this many Buy recommendations
     * @param {Number} opts.buysLess Return only records with fewer than this many Buy recommendations
     * @param {Number} opts.holdsGreater Return only records with more than this many Hold recommendations
     * @param {Number} opts.holdsLess Return only records with fewer than this many Hold recommendations
     * @param {Number} opts.sellsGreater Return only records with more than this many Sell recommendations
     * @param {Number} opts.sellsLess Return only records with fewer than this many Sell recommendations
     * @param {Number} opts.strongSellsGreater Return only records with more than this many Strong Sell recommendations
     * @param {Number} opts.strongSellsLess Return only records with fewer than this many Strong Sell recommendations
     * @param {Number} opts.totalGreater Return only records with more than this many recommendations, regardless of type
     * @param {Number} opts.totalLess Return only records with fewer than this many recommendations, regardless of type
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksAnalystRatings}
     */
    this.getZacksAnalystRatings = function(opts) {
      return this.getZacksAnalystRatingsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks EPS Estimates
     * Returns Zacks consensus earnings-per-share (EPS) data for all Companies.
     * @param {Object} opts Optional parameters
     * @param {String} opts.identifier A Company identifier (Ticker, CIK, LEI, Intrinio ID)
     * @param {Date} opts.startDate Limit EPS estimates to those on or after this date
     * @param {Date} opts.endDate Limit EPS estimates to those on or before this date
     * @param {Number} opts.fiscalYear Only for the given fiscal year
     * @param {module:model/String} opts.fiscalPeriod The fiscal period
     * @param {Number} opts.calendarYear Only for the given calendar year
     * @param {module:model/String} opts.calendarPeriod The calendar period
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksEPSEstimates} and HTTP response
     */
    this.getZacksEpsEstimatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'identifier': opts['identifier'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'fiscal_year': opts['fiscalYear'],
        'fiscal_period': opts['fiscalPeriod'],
        'calendar_year': opts['calendarYear'],
        'calendar_period': opts['calendarPeriod'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksEPSEstimates;
      var endpoint = '/zacks/eps_estimates'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks EPS Estimates
     * Returns Zacks consensus earnings-per-share (EPS) data for all Companies.
     * @param {Object} opts Optional parameters
     * @param {String} opts.identifier A Company identifier (Ticker, CIK, LEI, Intrinio ID)
     * @param {Date} opts.startDate Limit EPS estimates to those on or after this date
     * @param {Date} opts.endDate Limit EPS estimates to those on or before this date
     * @param {Number} opts.fiscalYear Only for the given fiscal year
     * @param {module:model/String} opts.fiscalPeriod The fiscal period
     * @param {Number} opts.calendarYear Only for the given calendar year
     * @param {module:model/String} opts.calendarPeriod The calendar period
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksEPSEstimates}
     */
    this.getZacksEpsEstimates = function(opts) {
      return this.getZacksEpsEstimatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks EPS Growth Rates
     * Returns the latest Zacks EPS growth rates
     * @param {Object} opts Optional parameters
     * @param {String} opts.company Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
     * @param {String} opts.industryGroupName Return only growth rates for companies in the given Zacks industry group name
     * @param {String} opts.industryGroupNumber Return only growth rates for companies in the given Zacks industry group number
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksEPSGrowthRates} and HTTP response
     */
    this.getZacksEpsGrowthRatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'company': opts['company'],
        'industry_group_name': opts['industryGroupName'],
        'industry_group_number': opts['industryGroupNumber'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksEPSGrowthRates;
      var endpoint = '/zacks/eps_growth_rates'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks EPS Growth Rates
     * Returns the latest Zacks EPS growth rates
     * @param {Object} opts Optional parameters
     * @param {String} opts.company Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
     * @param {String} opts.industryGroupName Return only growth rates for companies in the given Zacks industry group name
     * @param {String} opts.industryGroupNumber Return only growth rates for companies in the given Zacks industry group number
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksEPSGrowthRates}
     */
    this.getZacksEpsGrowthRates = function(opts) {
      return this.getZacksEpsGrowthRatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks EPS Surprises
     * Returns Zacks eps surprise data for all Securities.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Limit EPS surprises to those on or after this date
     * @param {Date} opts.endDate Limit EPS surprises to those on or before this date
     * @param {Number} opts.epsActualGreater Return only records with an actual EPS higher than this value
     * @param {Number} opts.epsActualLess Return only records with an actual EPS lower than this value
     * @param {Number} opts.epsMeanEstimateGreater Return only records with an EPS mean estimate greater than this value
     * @param {Number} opts.epsMeanEstimateLess Return only records with an EPS mean estimate lower than this value
     * @param {Number} opts.epsAmountDiffGreater Return only records with an EPS amount difference greater than this value
     * @param {Number} opts.epsAmountDiffLess Return only records with an EPS amount difference less than this value
     * @param {Number} opts.epsPercentDiffGreater Return only records with an EPS percent difference greater than this value
     * @param {Number} opts.epsPercentDiffLess Return only records with an EPS percent difference less than this value
     * @param {Number} opts.epsCountEstimateGreater Return only records with an EPS count estimate greater than this value
     * @param {Number} opts.epsCountEstimateLess Return only records with an EPS count estimate less than this value
     * @param {Number} opts.epsStdDevEstimateGreater Return only records with an EPS standard deviation greater than this value
     * @param {Number} opts.epsStdDevEstimateLess Return only records with an EPS standard deviation less than this value
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksEPSSurprises} and HTTP response
     */
    this.getZacksEpsSurprisesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'eps_actual_greater': opts['epsActualGreater'],
        'eps_actual_less': opts['epsActualLess'],
        'eps_mean_estimate_greater': opts['epsMeanEstimateGreater'],
        'eps_mean_estimate_less': opts['epsMeanEstimateLess'],
        'eps_amount_diff_greater': opts['epsAmountDiffGreater'],
        'eps_amount_diff_less': opts['epsAmountDiffLess'],
        'eps_percent_diff_greater': opts['epsPercentDiffGreater'],
        'eps_percent_diff_less': opts['epsPercentDiffLess'],
        'eps_count_estimate_greater': opts['epsCountEstimateGreater'],
        'eps_count_estimate_less': opts['epsCountEstimateLess'],
        'eps_std_dev_estimate_greater': opts['epsStdDevEstimateGreater'],
        'eps_std_dev_estimate_less': opts['epsStdDevEstimateLess'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksEPSSurprises;
      var endpoint = '/zacks/eps_surprises'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks EPS Surprises
     * Returns Zacks eps surprise data for all Securities.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Limit EPS surprises to those on or after this date
     * @param {Date} opts.endDate Limit EPS surprises to those on or before this date
     * @param {Number} opts.epsActualGreater Return only records with an actual EPS higher than this value
     * @param {Number} opts.epsActualLess Return only records with an actual EPS lower than this value
     * @param {Number} opts.epsMeanEstimateGreater Return only records with an EPS mean estimate greater than this value
     * @param {Number} opts.epsMeanEstimateLess Return only records with an EPS mean estimate lower than this value
     * @param {Number} opts.epsAmountDiffGreater Return only records with an EPS amount difference greater than this value
     * @param {Number} opts.epsAmountDiffLess Return only records with an EPS amount difference less than this value
     * @param {Number} opts.epsPercentDiffGreater Return only records with an EPS percent difference greater than this value
     * @param {Number} opts.epsPercentDiffLess Return only records with an EPS percent difference less than this value
     * @param {Number} opts.epsCountEstimateGreater Return only records with an EPS count estimate greater than this value
     * @param {Number} opts.epsCountEstimateLess Return only records with an EPS count estimate less than this value
     * @param {Number} opts.epsStdDevEstimateGreater Return only records with an EPS standard deviation greater than this value
     * @param {Number} opts.epsStdDevEstimateLess Return only records with an EPS standard deviation less than this value
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksEPSSurprises}
     */
    this.getZacksEpsSurprises = function(opts) {
      return this.getZacksEpsSurprisesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks ETF Holdings
     * Returns Zacks ETF holdings data
     * @param {Object} opts Optional parameters
     * @param {String} opts.etfTicker Return holdings of the ETF with the given ticker
     * @param {String} opts.holdingSymbol Return holdings where the instrument being held has the given trading symbol
     * @param {Number} opts.weightGreater Return on the holdings with a weight greater than
     * @param {Number} opts.weightLess Return on the holdings with a weight less than
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksETFHoldings} and HTTP response
     */
    this.getZacksEtfHoldingsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'etf_ticker': opts['etfTicker'],
        'holding_symbol': opts['holdingSymbol'],
        'weight_greater': opts['weightGreater'],
        'weight_less': opts['weightLess'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksETFHoldings;
      var endpoint = '/zacks/etf_holdings'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks ETF Holdings
     * Returns Zacks ETF holdings data
     * @param {Object} opts Optional parameters
     * @param {String} opts.etfTicker Return holdings of the ETF with the given ticker
     * @param {String} opts.holdingSymbol Return holdings where the instrument being held has the given trading symbol
     * @param {Number} opts.weightGreater Return on the holdings with a weight greater than
     * @param {Number} opts.weightLess Return on the holdings with a weight less than
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksETFHoldings}
     */
    this.getZacksEtfHoldings = function(opts) {
      return this.getZacksEtfHoldingsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks Institutional Holding Companies
     * Returns Zacks institutional holding companies data
     * @param {Object} opts Optional parameters
     * @param {String} opts.ticker Return companies with the given ticker
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksInstitutionalHoldingCompanies} and HTTP response
     */
    this.getZacksInstitutionalHoldingCompaniesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ticker': opts['ticker'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksInstitutionalHoldingCompanies;
      var endpoint = '/zacks/institutional_holdings/companies'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks Institutional Holding Companies
     * Returns Zacks institutional holding companies data
     * @param {Object} opts Optional parameters
     * @param {String} opts.ticker Return companies with the given ticker
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksInstitutionalHoldingCompanies}
     */
    this.getZacksInstitutionalHoldingCompanies = function(opts) {
      return this.getZacksInstitutionalHoldingCompaniesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks Institutional Holding Owners
     * Returns Zacks institutional holding owners data
     * @param {Object} opts Optional parameters
     * @param {String} opts.cik Return owners with the given Central Index Key (CIK)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksInstitutionalHoldingOwners} and HTTP response
     */
    this.getZacksInstitutionalHoldingOwnersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cik': opts['cik'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksInstitutionalHoldingOwners;
      var endpoint = '/zacks/institutional_holdings/owners'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks Institutional Holding Owners
     * Returns Zacks institutional holding owners data
     * @param {Object} opts Optional parameters
     * @param {String} opts.cik Return owners with the given Central Index Key (CIK)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksInstitutionalHoldingOwners}
     */
    this.getZacksInstitutionalHoldingOwners = function(opts) {
      return this.getZacksInstitutionalHoldingOwnersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks Institutional Holdings
     * Returns Zacks institutional holdings data
     * @param {Object} opts Optional parameters
     * @param {String} opts.ticker Return holdings where the company being held has the given ticker
     * @param {String} opts.ownerCik Return holdings where the owner/holder has the given Central Index Key (CIK)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksInstitutionalHoldings} and HTTP response
     */
    this.getZacksInstitutionalHoldingsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ticker': opts['ticker'],
        'owner_cik': opts['ownerCik'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksInstitutionalHoldings;
      var endpoint = '/zacks/institutional_holdings'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks Institutional Holdings
     * Returns Zacks institutional holdings data
     * @param {Object} opts Optional parameters
     * @param {String} opts.ticker Return holdings where the company being held has the given ticker
     * @param {String} opts.ownerCik Return holdings where the owner/holder has the given Central Index Key (CIK)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksInstitutionalHoldings}
     */
    this.getZacksInstitutionalHoldings = function(opts) {
      return this.getZacksInstitutionalHoldingsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks Long Term Growth Rates
     * Returns the latest Zacks long term growth rates
     * @param {Object} opts Optional parameters
     * @param {String} opts.identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksLongTermGrowthRates} and HTTP response
     */
    this.getZacksLongTermGrowthRatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'identifier': opts['identifier'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksLongTermGrowthRates;
      var endpoint = '/zacks/long_term_growth_rates'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks Long Term Growth Rates
     * Returns the latest Zacks long term growth rates
     * @param {Object} opts Optional parameters
     * @param {String} opts.identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksLongTermGrowthRates}
     */
    this.getZacksLongTermGrowthRates = function(opts) {
      return this.getZacksLongTermGrowthRatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks Sales Surprises
     * Returns Zacks sales surprise data for all Securities.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Limit sales surprises to those on or after this date
     * @param {Date} opts.endDate Limit sales surprises to those on or before this date
     * @param {Number} opts.salesActualGreater Return only records with an actual sales higher than this value
     * @param {Number} opts.salesActualLess Return only records with an actual sales lower than this value
     * @param {Number} opts.salesMeanEstimateGreater Return only records with a sales mean estimate greater than this value
     * @param {Number} opts.salesMeanEstimateLess Return only records with a sales mean estimate lower than this value
     * @param {Number} opts.salesAmountDiffGreater Return only records with a sales amount difference greater than this value
     * @param {Number} opts.salesAmountDiffLess Return only records with a sales amount difference less than this value
     * @param {Number} opts.salesPercentDiffGreater Return only records with a sales percent difference greater than this value
     * @param {Number} opts.salesPercentDiffLess Return only records with a sales percent difference less than this value
     * @param {Number} opts.salesCountEstimateGreater Return only records with a sales count estimate greater than this value
     * @param {Number} opts.salesCountEstimateLess Return only records with a sales count estimate less than this value
     * @param {Number} opts.salesStdDevEstimateGreater Return only records with a sales standard deviation greater than this value
     * @param {Number} opts.salesStdDevEstimateLess Return only records with a sales standard deviation less than this value
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksSalesSurprises} and HTTP response
     */
    this.getZacksSalesSurprisesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'sales_actual_greater': opts['salesActualGreater'],
        'sales_actual_less': opts['salesActualLess'],
        'sales_mean_estimate_greater': opts['salesMeanEstimateGreater'],
        'sales_mean_estimate_less': opts['salesMeanEstimateLess'],
        'sales_amount_diff_greater': opts['salesAmountDiffGreater'],
        'sales_amount_diff_less': opts['salesAmountDiffLess'],
        'sales_percent_diff_greater': opts['salesPercentDiffGreater'],
        'sales_percent_diff_less': opts['salesPercentDiffLess'],
        'sales_count_estimate_greater': opts['salesCountEstimateGreater'],
        'sales_count_estimate_less': opts['salesCountEstimateLess'],
        'sales_std_dev_estimate_greater': opts['salesStdDevEstimateGreater'],
        'sales_std_dev_estimate_less': opts['salesStdDevEstimateLess'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksSalesSurprises;
      var endpoint = '/zacks/sales_surprises'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks Sales Surprises
     * Returns Zacks sales surprise data for all Securities.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Limit sales surprises to those on or after this date
     * @param {Date} opts.endDate Limit sales surprises to those on or before this date
     * @param {Number} opts.salesActualGreater Return only records with an actual sales higher than this value
     * @param {Number} opts.salesActualLess Return only records with an actual sales lower than this value
     * @param {Number} opts.salesMeanEstimateGreater Return only records with a sales mean estimate greater than this value
     * @param {Number} opts.salesMeanEstimateLess Return only records with a sales mean estimate lower than this value
     * @param {Number} opts.salesAmountDiffGreater Return only records with a sales amount difference greater than this value
     * @param {Number} opts.salesAmountDiffLess Return only records with a sales amount difference less than this value
     * @param {Number} opts.salesPercentDiffGreater Return only records with a sales percent difference greater than this value
     * @param {Number} opts.salesPercentDiffLess Return only records with a sales percent difference less than this value
     * @param {Number} opts.salesCountEstimateGreater Return only records with a sales count estimate greater than this value
     * @param {Number} opts.salesCountEstimateLess Return only records with a sales count estimate less than this value
     * @param {Number} opts.salesStdDevEstimateGreater Return only records with a sales standard deviation greater than this value
     * @param {Number} opts.salesStdDevEstimateLess Return only records with a sales standard deviation less than this value
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksSalesSurprises}
     */
    this.getZacksSalesSurprises = function(opts) {
      return this.getZacksSalesSurprisesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks Target Price Consensuses
     * Returns the latest Zacks target price consensus data
     * @param {Object} opts Optional parameters
     * @param {String} opts.identifier Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
     * @param {String} opts.industryGroupNumber Return only growth rates for companies in the given Zacks industry group number
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseZacksTargetPriceConsensuses} and HTTP response
     */
    this.getZacksTargetPriceConsensusesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'identifier': opts['identifier'],
        'industry_group_number': opts['industryGroupNumber'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseZacksTargetPriceConsensuses;
      var endpoint = '/zacks/target_price_consensuses'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks Target Price Consensuses
     * Returns the latest Zacks target price consensus data
     * @param {Object} opts Optional parameters
     * @param {String} opts.identifier Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
     * @param {String} opts.industryGroupNumber Return only growth rates for companies in the given Zacks industry group number
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseZacksTargetPriceConsensuses}
     */
    this.getZacksTargetPriceConsensuses = function(opts) {
      return this.getZacksTargetPriceConsensusesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    this.makeApiCall = function(parameters) {
      const retry = require('async-retry')
      
      const { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType } = parameters;
      
      async function makeApiRequest(intrinioSDK) {
        let response = intrinioSDK.apiClient.callApi(
          endpoint, method,
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType
        );
        return response
      }
      
      var retryAmount = 0;
      if (this.apiClient.enableRetries == true) {
        retryAmount = 5;
      }
      
      return retry((bail, attempt) => {
          return new Promise((resolve, reject) => {
            var req = makeApiRequest(this, bail);
            
            req.then((response) => {
              resolve(response);
            })
            .catch((error) => {
              // OpenAPI parses the "less than" sign uniquely. Logic below is alternate logic to remedy this.
              var isClientError = error.status >= 400 && !(error.status >= 500);
              
              // Check for rate limit header. Bail if it is greater than the max allotted retry, otherwise run a loop until the rate limit resets 
              // Do not retry on all other 400 errors
              if (error.status == 429) {
                var rateLimitMilliSeconds = error.response.headers['retry-after'] * 1000;
                
                if (rateLimitMilliSeconds > MAX_RETRY_MILLISECONDS) {
                  resolve(bail(error));
                }
                
                setTimeout(() => {
                  reject(error);
                }, rateLimitMilliSeconds);
              } else if (isClientError) {
                resolve(bail(error));
              } else {
                reject(error);
              }
            });
            
          })
      }, {
        minTimeout: 1000,
        maxTimeout: MAX_RETRY_MILLISECONDS,
        randomize: true,
        retries: retryAmount,
        factor: 1
      }).then((response) => {
        return response;
      })
    }
  };
  
  return exports;
}));
