/**
 * Intrinio API
 * Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://docs.intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.62.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponseSecurities', 'model/ApiResponseSecuritiesSearch', 'model/ApiResponseSecurityAccumulationDistributionIndex', 'model/ApiResponseSecurityAverageDailyTradingVolume', 'model/ApiResponseSecurityAverageDirectionalIndex', 'model/ApiResponseSecurityAverageTrueRange', 'model/ApiResponseSecurityAwesomeOscillator', 'model/ApiResponseSecurityBollingerBands', 'model/ApiResponseSecurityChaikinMoneyFlow', 'model/ApiResponseSecurityCommodityChannelIndex', 'model/ApiResponseSecurityDetrendedPriceOscillator', 'model/ApiResponseSecurityDonchianChannel', 'model/ApiResponseSecurityEaseOfMovement', 'model/ApiResponseSecurityForceIndex', 'model/ApiResponseSecurityHistoricalData', 'model/ApiResponseSecurityIchimokuKinkoHyo', 'model/ApiResponseSecurityInstitutionalOwnership', 'model/ApiResponseSecurityIntervalPrices', 'model/ApiResponseSecurityIntradayPrices', 'model/ApiResponseSecurityKeltnerChannel', 'model/ApiResponseSecurityKnowSureThing', 'model/ApiResponseSecurityMassIndex', 'model/ApiResponseSecurityMoneyFlowIndex', 'model/ApiResponseSecurityMovingAverageConvergenceDivergence', 'model/ApiResponseSecurityNegativeVolumeIndex', 'model/ApiResponseSecurityOnBalanceVolume', 'model/ApiResponseSecurityOnBalanceVolumeMean', 'model/ApiResponseSecurityRelativeStrengthIndex', 'model/ApiResponseSecuritySimpleMovingAverage', 'model/ApiResponseSecurityStochasticOscillator', 'model/ApiResponseSecurityStockPriceAdjustments', 'model/ApiResponseSecurityStockPrices', 'model/ApiResponseSecurityTripleExponentialAverage', 'model/ApiResponseSecurityTrueStrengthIndex', 'model/ApiResponseSecurityUltimateOscillator', 'model/ApiResponseSecurityVolumePriceTrend', 'model/ApiResponseSecurityVolumeWeightedAveragePrice', 'model/ApiResponseSecurityVortexIndicator', 'model/ApiResponseSecurityWilliamsR', 'model/ApiResponseSecurityZacksAnalystRatings', 'model/ApiResponseSecurityZacksAnalystRatingsSnapshot', 'model/ApiResponseSecurityZacksEPSSurprises', 'model/ApiResponseSecurityZacksSalesSurprises', 'model/DividendRecord', 'model/EarningsRecord', 'model/RealtimeStockPrice', 'model/Security', 'model/SecurityHistoryListResult', 'model/SecurityIntervalsMoversResult', 'model/SecurityReplayFileResult', 'model/SecurityScreenGroup', 'model/SecurityScreenResult', 'model/SecuritySnapshotsResult', 'model/SecurityTradesResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponseSecurities'), require('../model/ApiResponseSecuritiesSearch'), require('../model/ApiResponseSecurityAccumulationDistributionIndex'), require('../model/ApiResponseSecurityAverageDailyTradingVolume'), require('../model/ApiResponseSecurityAverageDirectionalIndex'), require('../model/ApiResponseSecurityAverageTrueRange'), require('../model/ApiResponseSecurityAwesomeOscillator'), require('../model/ApiResponseSecurityBollingerBands'), require('../model/ApiResponseSecurityChaikinMoneyFlow'), require('../model/ApiResponseSecurityCommodityChannelIndex'), require('../model/ApiResponseSecurityDetrendedPriceOscillator'), require('../model/ApiResponseSecurityDonchianChannel'), require('../model/ApiResponseSecurityEaseOfMovement'), require('../model/ApiResponseSecurityForceIndex'), require('../model/ApiResponseSecurityHistoricalData'), require('../model/ApiResponseSecurityIchimokuKinkoHyo'), require('../model/ApiResponseSecurityInstitutionalOwnership'), require('../model/ApiResponseSecurityIntervalPrices'), require('../model/ApiResponseSecurityIntradayPrices'), require('../model/ApiResponseSecurityKeltnerChannel'), require('../model/ApiResponseSecurityKnowSureThing'), require('../model/ApiResponseSecurityMassIndex'), require('../model/ApiResponseSecurityMoneyFlowIndex'), require('../model/ApiResponseSecurityMovingAverageConvergenceDivergence'), require('../model/ApiResponseSecurityNegativeVolumeIndex'), require('../model/ApiResponseSecurityOnBalanceVolume'), require('../model/ApiResponseSecurityOnBalanceVolumeMean'), require('../model/ApiResponseSecurityRelativeStrengthIndex'), require('../model/ApiResponseSecuritySimpleMovingAverage'), require('../model/ApiResponseSecurityStochasticOscillator'), require('../model/ApiResponseSecurityStockPriceAdjustments'), require('../model/ApiResponseSecurityStockPrices'), require('../model/ApiResponseSecurityTripleExponentialAverage'), require('../model/ApiResponseSecurityTrueStrengthIndex'), require('../model/ApiResponseSecurityUltimateOscillator'), require('../model/ApiResponseSecurityVolumePriceTrend'), require('../model/ApiResponseSecurityVolumeWeightedAveragePrice'), require('../model/ApiResponseSecurityVortexIndicator'), require('../model/ApiResponseSecurityWilliamsR'), require('../model/ApiResponseSecurityZacksAnalystRatings'), require('../model/ApiResponseSecurityZacksAnalystRatingsSnapshot'), require('../model/ApiResponseSecurityZacksEPSSurprises'), require('../model/ApiResponseSecurityZacksSalesSurprises'), require('../model/DividendRecord'), require('../model/EarningsRecord'), require('../model/RealtimeStockPrice'), require('../model/Security'), require('../model/SecurityHistoryListResult'), require('../model/SecurityIntervalsMoversResult'), require('../model/SecurityReplayFileResult'), require('../model/SecurityScreenGroup'), require('../model/SecurityScreenResult'), require('../model/SecuritySnapshotsResult'), require('../model/SecurityTradesResult'));
  } else {
    // Browser globals (root is window)
    if (!root.intrinioSDK) {
      root.intrinioSDK = {};
    }
    root.intrinioSDK.SecurityApi = factory(root.intrinioSDK.ApiClient, root.intrinioSDK.ApiResponseSecurities, root.intrinioSDK.ApiResponseSecuritiesSearch, root.intrinioSDK.ApiResponseSecurityAccumulationDistributionIndex, root.intrinioSDK.ApiResponseSecurityAverageDailyTradingVolume, root.intrinioSDK.ApiResponseSecurityAverageDirectionalIndex, root.intrinioSDK.ApiResponseSecurityAverageTrueRange, root.intrinioSDK.ApiResponseSecurityAwesomeOscillator, root.intrinioSDK.ApiResponseSecurityBollingerBands, root.intrinioSDK.ApiResponseSecurityChaikinMoneyFlow, root.intrinioSDK.ApiResponseSecurityCommodityChannelIndex, root.intrinioSDK.ApiResponseSecurityDetrendedPriceOscillator, root.intrinioSDK.ApiResponseSecurityDonchianChannel, root.intrinioSDK.ApiResponseSecurityEaseOfMovement, root.intrinioSDK.ApiResponseSecurityForceIndex, root.intrinioSDK.ApiResponseSecurityHistoricalData, root.intrinioSDK.ApiResponseSecurityIchimokuKinkoHyo, root.intrinioSDK.ApiResponseSecurityInstitutionalOwnership, root.intrinioSDK.ApiResponseSecurityIntervalPrices, root.intrinioSDK.ApiResponseSecurityIntradayPrices, root.intrinioSDK.ApiResponseSecurityKeltnerChannel, root.intrinioSDK.ApiResponseSecurityKnowSureThing, root.intrinioSDK.ApiResponseSecurityMassIndex, root.intrinioSDK.ApiResponseSecurityMoneyFlowIndex, root.intrinioSDK.ApiResponseSecurityMovingAverageConvergenceDivergence, root.intrinioSDK.ApiResponseSecurityNegativeVolumeIndex, root.intrinioSDK.ApiResponseSecurityOnBalanceVolume, root.intrinioSDK.ApiResponseSecurityOnBalanceVolumeMean, root.intrinioSDK.ApiResponseSecurityRelativeStrengthIndex, root.intrinioSDK.ApiResponseSecuritySimpleMovingAverage, root.intrinioSDK.ApiResponseSecurityStochasticOscillator, root.intrinioSDK.ApiResponseSecurityStockPriceAdjustments, root.intrinioSDK.ApiResponseSecurityStockPrices, root.intrinioSDK.ApiResponseSecurityTripleExponentialAverage, root.intrinioSDK.ApiResponseSecurityTrueStrengthIndex, root.intrinioSDK.ApiResponseSecurityUltimateOscillator, root.intrinioSDK.ApiResponseSecurityVolumePriceTrend, root.intrinioSDK.ApiResponseSecurityVolumeWeightedAveragePrice, root.intrinioSDK.ApiResponseSecurityVortexIndicator, root.intrinioSDK.ApiResponseSecurityWilliamsR, root.intrinioSDK.ApiResponseSecurityZacksAnalystRatings, root.intrinioSDK.ApiResponseSecurityZacksAnalystRatingsSnapshot, root.intrinioSDK.ApiResponseSecurityZacksEPSSurprises, root.intrinioSDK.ApiResponseSecurityZacksSalesSurprises, root.intrinioSDK.DividendRecord, root.intrinioSDK.EarningsRecord, root.intrinioSDK.RealtimeStockPrice, root.intrinioSDK.Security, root.intrinioSDK.SecurityHistoryListResult, root.intrinioSDK.SecurityIntervalsMoversResult, root.intrinioSDK.SecurityReplayFileResult, root.intrinioSDK.SecurityScreenGroup, root.intrinioSDK.SecurityScreenResult, root.intrinioSDK.SecuritySnapshotsResult, root.intrinioSDK.SecurityTradesResult);
  }
}(this, function(ApiClient, ApiResponseSecurities, ApiResponseSecuritiesSearch, ApiResponseSecurityAccumulationDistributionIndex, ApiResponseSecurityAverageDailyTradingVolume, ApiResponseSecurityAverageDirectionalIndex, ApiResponseSecurityAverageTrueRange, ApiResponseSecurityAwesomeOscillator, ApiResponseSecurityBollingerBands, ApiResponseSecurityChaikinMoneyFlow, ApiResponseSecurityCommodityChannelIndex, ApiResponseSecurityDetrendedPriceOscillator, ApiResponseSecurityDonchianChannel, ApiResponseSecurityEaseOfMovement, ApiResponseSecurityForceIndex, ApiResponseSecurityHistoricalData, ApiResponseSecurityIchimokuKinkoHyo, ApiResponseSecurityInstitutionalOwnership, ApiResponseSecurityIntervalPrices, ApiResponseSecurityIntradayPrices, ApiResponseSecurityKeltnerChannel, ApiResponseSecurityKnowSureThing, ApiResponseSecurityMassIndex, ApiResponseSecurityMoneyFlowIndex, ApiResponseSecurityMovingAverageConvergenceDivergence, ApiResponseSecurityNegativeVolumeIndex, ApiResponseSecurityOnBalanceVolume, ApiResponseSecurityOnBalanceVolumeMean, ApiResponseSecurityRelativeStrengthIndex, ApiResponseSecuritySimpleMovingAverage, ApiResponseSecurityStochasticOscillator, ApiResponseSecurityStockPriceAdjustments, ApiResponseSecurityStockPrices, ApiResponseSecurityTripleExponentialAverage, ApiResponseSecurityTrueStrengthIndex, ApiResponseSecurityUltimateOscillator, ApiResponseSecurityVolumePriceTrend, ApiResponseSecurityVolumeWeightedAveragePrice, ApiResponseSecurityVortexIndicator, ApiResponseSecurityWilliamsR, ApiResponseSecurityZacksAnalystRatings, ApiResponseSecurityZacksAnalystRatingsSnapshot, ApiResponseSecurityZacksEPSSurprises, ApiResponseSecurityZacksSalesSurprises, DividendRecord, EarningsRecord, RealtimeStockPrice, Security, SecurityHistoryListResult, SecurityIntervalsMoversResult, SecurityReplayFileResult, SecurityScreenGroup, SecurityScreenResult, SecuritySnapshotsResult, SecurityTradesResult) {
  'use strict';

  /**
   * Security service.
   * @module api/SecurityApi
   * @version 6.27.4
   */

  /**
   * Constructs a new SecurityApi. 
   * @alias module:api/SecurityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
    const MAX_RETRY_MILLISECONDS = 60000;
    


    /**
     * All Securities
     * Returns a list of all securities available. Delisted securities included.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.active When true, return securities that are active. When false, return securities that are not active. A security is considered active if it has traded or has had a corporate action in the past 30 days, and has not been merged into another security (such as due to ticker changes or corporate restructurings).
     * @param {Boolean} opts.delisted When true, return securities that have been delisted from their exchange. Note that there may be a newer security for the same company that has been relisted on a differente exchange. When false, return securities that have not been delisted.
     * @param {String} opts.code Return securities classified with the given code (&lt;a href&#x3D;\&quot;https://docs.intrinio.com/documentation/security_codes\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {String} opts.currency Return securities traded in the given 3-digit ISO 4217 currency code (&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {String} opts.ticker Return securities traded with the given ticker. Note that securities across the world (and through time) may trade with the same ticker but represent different companies. Use this in conjuction with other parameters for more specificity.
     * @param {String} opts.name Return securities with the given text in their name (not case sensitive).
     * @param {String} opts.compositeMic Return securities classified under the composite exchange with the given Market Identification Code (MIC). A composite exchange may or may not be a real exchange.  For example, the USCOMP exchange (our only composite exchange to date) is a combination of exchanges with the following MICs: ARCX, XASE, XPOR, FINR, XCIS, XNAS, XNYS, BATS.  This composite grouping is done for user convenience.  At this time, all US securities are classified under the composite exchange with MIC USCOMP.  To query for specific US exchanges, use the exchange_mic parameter below. 
     * @param {String} opts.exchangeMic The MIC code of the exchange where the security is actually traded.
     * @param {Date} opts.stockPricesAfter Return securities with end-of-day stock prices on or after this date.
     * @param {Date} opts.stockPricesBefore Return securities with end-of-day stock prices on or before this date.
     * @param {String} opts.cik Return securities belonging to the company with the given Central Index Key (CIK).
     * @param {String} opts.figi Return securities with the given Exchange Level FIGI (&lt;a href&#x3D;\&quot;https://www.openfigi.com/about\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {String} opts.compositeFigi Return securities with the given Country Composite FIGI (&lt;a href&#x3D;\&quot;https://www.openfigi.com/about\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {String} opts.shareClassFigi Return securities with the given Global Share Class FIGI (&lt;a href&#x3D;\&quot;https://www.openfigi.com/about\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {String} opts.figiUniqueId Return securities with the given FIGI Unique ID (&lt;a href&#x3D;\&quot;https://www.openfigi.com/about\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {Boolean} opts.includeNonFigi When true, include securities that do not have a FIGI. By default, this is false. If this parameter is not specified, only securities with a FIGI are returned. (default to false)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {Boolean} opts.primaryListing If true, the Security is the primary issue for the company, otherwise it is a secondary issue on a secondary stock exchange.  Returns both if omitted.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurities} and HTTP response
     */
    this.getAllSecuritiesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        'delisted': opts['delisted'],
        'code': opts['code'],
        'currency': opts['currency'],
        'ticker': opts['ticker'],
        'name': opts['name'],
        'composite_mic': opts['compositeMic'],
        'exchange_mic': opts['exchangeMic'],
        'stock_prices_after': opts['stockPricesAfter'],
        'stock_prices_before': opts['stockPricesBefore'],
        'cik': opts['cik'],
        'figi': opts['figi'],
        'composite_figi': opts['compositeFigi'],
        'share_class_figi': opts['shareClassFigi'],
        'figi_unique_id': opts['figiUniqueId'],
        'include_non_figi': opts['includeNonFigi'],
        'page_size': opts['pageSize'],
        'primary_listing': opts['primaryListing'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurities;
      var endpoint = '/securities'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * All Securities
     * Returns a list of all securities available. Delisted securities included.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.active When true, return securities that are active. When false, return securities that are not active. A security is considered active if it has traded or has had a corporate action in the past 30 days, and has not been merged into another security (such as due to ticker changes or corporate restructurings).
     * @param {Boolean} opts.delisted When true, return securities that have been delisted from their exchange. Note that there may be a newer security for the same company that has been relisted on a differente exchange. When false, return securities that have not been delisted.
     * @param {String} opts.code Return securities classified with the given code (&lt;a href&#x3D;\&quot;https://docs.intrinio.com/documentation/security_codes\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {String} opts.currency Return securities traded in the given 3-digit ISO 4217 currency code (&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {String} opts.ticker Return securities traded with the given ticker. Note that securities across the world (and through time) may trade with the same ticker but represent different companies. Use this in conjuction with other parameters for more specificity.
     * @param {String} opts.name Return securities with the given text in their name (not case sensitive).
     * @param {String} opts.compositeMic Return securities classified under the composite exchange with the given Market Identification Code (MIC). A composite exchange may or may not be a real exchange.  For example, the USCOMP exchange (our only composite exchange to date) is a combination of exchanges with the following MICs: ARCX, XASE, XPOR, FINR, XCIS, XNAS, XNYS, BATS.  This composite grouping is done for user convenience.  At this time, all US securities are classified under the composite exchange with MIC USCOMP.  To query for specific US exchanges, use the exchange_mic parameter below. 
     * @param {String} opts.exchangeMic The MIC code of the exchange where the security is actually traded.
     * @param {Date} opts.stockPricesAfter Return securities with end-of-day stock prices on or after this date.
     * @param {Date} opts.stockPricesBefore Return securities with end-of-day stock prices on or before this date.
     * @param {String} opts.cik Return securities belonging to the company with the given Central Index Key (CIK).
     * @param {String} opts.figi Return securities with the given Exchange Level FIGI (&lt;a href&#x3D;\&quot;https://www.openfigi.com/about\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {String} opts.compositeFigi Return securities with the given Country Composite FIGI (&lt;a href&#x3D;\&quot;https://www.openfigi.com/about\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {String} opts.shareClassFigi Return securities with the given Global Share Class FIGI (&lt;a href&#x3D;\&quot;https://www.openfigi.com/about\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {String} opts.figiUniqueId Return securities with the given FIGI Unique ID (&lt;a href&#x3D;\&quot;https://www.openfigi.com/about\&quot; target&#x3D;\&quot;_blank\&quot;&gt;reference&lt;/a&gt;).
     * @param {Boolean} opts.includeNonFigi When true, include securities that do not have a FIGI. By default, this is false. If this parameter is not specified, only securities with a FIGI are returned. (default to false)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {Boolean} opts.primaryListing If true, the Security is the primary issue for the company, otherwise it is a secondary issue on a secondary stock exchange.  Returns both if omitted.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurities}
     */
    this.getAllSecurities = function(opts) {
      return this.getAllSecuritiesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Lookup Security
     * Returns security reference data such as ticker, FIGI, primary exchange, CIK, and a unique security identifier.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Security} and HTTP response
     */
    this.getSecurityByIdWithHttpInfo = function(identifier) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityById");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Security;
      var endpoint = '/securities/{identifier}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Lookup Security
     * Returns security reference data such as ticker, FIGI, primary exchange, CIK, and a unique security identifier.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Security}
     */
    this.getSecurityById = function(identifier) {
      return this.getSecurityByIdWithHttpInfo(identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Data Point (Number) for Security
     * Returns a numeric value for the given &#x60;tag&#x60; for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code (&lt;a href&#x3D;&#39;https://data.intrinio.com/data-tags&#39;&gt;reference&lt;/a&gt;)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    this.getSecurityDataPointNumberWithHttpInfo = function(identifier, tag) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityDataPointNumber");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling getSecurityDataPointNumber");
      }


      var pathParams = {
        'identifier': identifier,
        'tag': tag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['text/plain; charset=utf-8'];
      var returnType = 'Number';
      var endpoint = '/securities/{identifier}/data_point/{tag}/number'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Data Point (Number) for Security
     * Returns a numeric value for the given &#x60;tag&#x60; for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code (&lt;a href&#x3D;&#39;https://data.intrinio.com/data-tags&#39;&gt;reference&lt;/a&gt;)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    this.getSecurityDataPointNumber = function(identifier, tag) {
      return this.getSecurityDataPointNumberWithHttpInfo(identifier, tag)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Data Point (Text) for Security
     * Returns a text value for the given &#x60;tag&#x60; for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code-name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.getSecurityDataPointTextWithHttpInfo = function(identifier, tag) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityDataPointText");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling getSecurityDataPointText");
      }


      var pathParams = {
        'identifier': identifier,
        'tag': tag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['text/plain; charset=utf-8'];
      var returnType = 'String';
      var endpoint = '/securities/{identifier}/data_point/{tag}/text'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Data Point (Text) for Security
     * Returns a text value for the given &#x60;tag&#x60; for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code-name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.getSecurityDataPointText = function(identifier, tag) {
      return this.getSecurityDataPointTextWithHttpInfo(identifier, tag)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Historical Data for Security
     * Returns historical values for the given &#x60;tag&#x60; and the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code (&lt;a href&#x3D;&#39;https://data.intrinio.com/data-tags&#39;&gt;reference&lt;/a&gt;)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.frequency Return historical data in the given frequency (default to daily)
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical date on or before this date
     * @param {module:model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityHistoricalData} and HTTP response
     */
    this.getSecurityHistoricalDataWithHttpInfo = function(identifier, tag, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityHistoricalData");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling getSecurityHistoricalData");
      }


      var pathParams = {
        'identifier': identifier,
        'tag': tag
      };
      var queryParams = {
        'frequency': opts['frequency'],
        'type': opts['type'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'sort_order': opts['sortOrder'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityHistoricalData;
      var endpoint = '/securities/{identifier}/historical_data/{tag}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Historical Data for Security
     * Returns historical values for the given &#x60;tag&#x60; and the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code (&lt;a href&#x3D;&#39;https://data.intrinio.com/data-tags&#39;&gt;reference&lt;/a&gt;)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.frequency Return historical data in the given frequency (default to daily)
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical date on or before this date
     * @param {module:model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityHistoricalData}
     */
    this.getSecurityHistoricalData = function(identifier, tag, opts) {
      return this.getSecurityHistoricalDataWithHttpInfo(identifier, tag, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Security History By Identifier
     * Lists the tickers a company has used over time.
     * @param {String} identifier A Security identifier (FIGI, COMPOSITE FIGI, SHARE CLASS FIGI, ISIN, CUSIP, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityHistoryListResult} and HTTP response
     */
    this.getSecurityHistoryByIdentifierWithHttpInfo = function(identifier) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityHistoryByIdentifier");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SecurityHistoryListResult;
      var endpoint = '/securities/history-by-identifier/{identifier}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Security History By Identifier
     * Lists the tickers a company has used over time.
     * @param {String} identifier A Security identifier (FIGI, COMPOSITE FIGI, SHARE CLASS FIGI, ISIN, CUSIP, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecurityHistoryListResult}
     */
    this.getSecurityHistoryByIdentifier = function(identifier) {
      return this.getSecurityHistoryByIdentifierWithHttpInfo(identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Security History By Ticker
     * Lists the tickers a company has used over time.
     * @param {String} ticker A Security ticker symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityHistoryListResult} and HTTP response
     */
    this.getSecurityHistoryByTickerWithHttpInfo = function(ticker) {
      var postBody = null;

      // verify the required parameter 'ticker' is set
      if (ticker === undefined || ticker === null) {
        throw new Error("Missing the required parameter 'ticker' when calling getSecurityHistoryByTicker");
      }


      var pathParams = {
        'ticker': ticker
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SecurityHistoryListResult;
      var endpoint = '/securities/history-by-ticker/{ticker}'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Security History By Ticker
     * Lists the tickers a company has used over time.
     * @param {String} ticker A Security ticker symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecurityHistoryListResult}
     */
    this.getSecurityHistoryByTicker = function(ticker) {
      return this.getSecurityHistoryByTickerWithHttpInfo(ticker)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Institutional Ownership by Security
     * Returns a list of all institutional owners of a given security.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityInstitutionalOwnership} and HTTP response
     */
    this.getSecurityInsiderOwnershipWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityInsiderOwnership");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityInstitutionalOwnership;
      var endpoint = '/securities/{identifier}/institutional_ownership'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Institutional Ownership by Security
     * Returns a list of all institutional owners of a given security.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityInstitutionalOwnership}
     */
    this.getSecurityInsiderOwnership = function(identifier, opts) {
      return this.getSecurityInsiderOwnershipWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Security Intervals Movers
     * Returns a list of intervals for the biggest movers over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityIntervalsMoversResult} and HTTP response
     */
    this.getSecurityIntervalMoversWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'source': opts['source'],
        'open_time': opts['openTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SecurityIntervalsMoversResult;
      var endpoint = '/securities/market_movers'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Security Intervals Movers
     * Returns a list of intervals for the biggest movers over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecurityIntervalsMoversResult}
     */
    this.getSecurityIntervalMovers = function(opts) {
      return this.getSecurityIntervalMoversWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Security Intervals Movers By Change
     * Returns a list of intervals for the biggest movers by change over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityIntervalsMoversResult} and HTTP response
     */
    this.getSecurityIntervalMoversChangeWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'source': opts['source'],
        'open_time': opts['openTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SecurityIntervalsMoversResult;
      var endpoint = '/securities/market_movers/change'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Security Intervals Movers By Change
     * Returns a list of intervals for the biggest movers by change over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecurityIntervalsMoversResult}
     */
    this.getSecurityIntervalMoversChange = function(opts) {
      return this.getSecurityIntervalMoversChangeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Security Intervals Movers By Volume
     * Returns a list of intervals for the biggest movers by volume over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityIntervalsMoversResult} and HTTP response
     */
    this.getSecurityIntervalMoversVolumeWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'source': opts['source'],
        'open_time': opts['openTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SecurityIntervalsMoversResult;
      var endpoint = '/securities/market_movers/volume'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Security Intervals Movers By Volume
     * Returns a list of intervals for the biggest movers by volume over the last hour interval.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Realtime or 15-minute delayed contracts.
     * @param {Date} opts.openTime The inclusive UTC date and time the interval opens at.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecurityIntervalsMoversResult}
     */
    this.getSecurityIntervalMoversVolume = function(opts) {
      return this.getSecurityIntervalMoversVolumeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Interval Stock Prices for Security
     * Return open, close, high, low, volume, average price, and change ratio for a particular interval for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {module:model/String} intervalSize The interval for which to return stock prices
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Return intervals from the specified data source
     * @param {Date} opts.startDate Return intervals starting at the specified date
     * @param {String} opts.startTime Return intervals starting at the specified time on the &#x60;start_date&#x60; (24-hour in &#39;hh:mm:ss&#39; format)
     * @param {Date} opts.endDate Return intervals stopping at the specified date
     * @param {String} opts.endTime Return intervals stopping at the specified time on the &#x60;end_date&#x60; (24-hour in &#39;hh:mm:ss&#39; format)
     * @param {module:model/String} opts.timezone Returns trading times in this timezone (default to UTC)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {Boolean} opts.splitAdjusted Whether to return the values adjusted for splits or not. Default is false. (default to false)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityIntervalPrices} and HTTP response
     */
    this.getSecurityIntervalPricesWithHttpInfo = function(identifier, intervalSize, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityIntervalPrices");
      }

      // verify the required parameter 'intervalSize' is set
      if (intervalSize === undefined || intervalSize === null) {
        throw new Error("Missing the required parameter 'intervalSize' when calling getSecurityIntervalPrices");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'source': opts['source'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'timezone': opts['timezone'],
        'interval_size': intervalSize,
        'page_size': opts['pageSize'],
        'split_adjusted': opts['splitAdjusted'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityIntervalPrices;
      var endpoint = '/securities/{identifier}/prices/intervals'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Interval Stock Prices for Security
     * Return open, close, high, low, volume, average price, and change ratio for a particular interval for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {module:model/String} intervalSize The interval for which to return stock prices
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Return intervals from the specified data source
     * @param {Date} opts.startDate Return intervals starting at the specified date
     * @param {String} opts.startTime Return intervals starting at the specified time on the &#x60;start_date&#x60; (24-hour in &#39;hh:mm:ss&#39; format)
     * @param {Date} opts.endDate Return intervals stopping at the specified date
     * @param {String} opts.endTime Return intervals stopping at the specified time on the &#x60;end_date&#x60; (24-hour in &#39;hh:mm:ss&#39; format)
     * @param {module:model/String} opts.timezone Returns trading times in this timezone (default to UTC)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {Boolean} opts.splitAdjusted Whether to return the values adjusted for splits or not. Default is false. (default to false)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityIntervalPrices}
     */
    this.getSecurityIntervalPrices = function(identifier, intervalSize, opts) {
      return this.getSecurityIntervalPricesWithHttpInfo(identifier, intervalSize, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Intraday Stock Prices for Security
     * Return intraday stock prices for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Return intraday prices from the specified data source
     * @param {Date} opts.startDate Return intraday prices starting at the specified date
     * @param {String} opts.startTime Return intraday prices starting at the specified time on the &#x60;start_date&#x60; (24-hour in &#39;hh:mm&#39; format, UTC timezone)
     * @param {Date} opts.endDate Return intraday prices stopping at the specified date
     * @param {String} opts.endTime Return intraday prices stopping at the specified time on the &#x60;end_date&#x60; (24-hour in &#39;hh:mm&#39; format, UTC timezone)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityIntradayPrices} and HTTP response
     */
    this.getSecurityIntradayPricesWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityIntradayPrices");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'source': opts['source'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityIntradayPrices;
      var endpoint = '/securities/{identifier}/prices/intraday'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Intraday Stock Prices for Security
     * Return intraday stock prices for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Return intraday prices from the specified data source
     * @param {Date} opts.startDate Return intraday prices starting at the specified date
     * @param {String} opts.startTime Return intraday prices starting at the specified time on the &#x60;start_date&#x60; (24-hour in &#39;hh:mm&#39; format, UTC timezone)
     * @param {Date} opts.endDate Return intraday prices stopping at the specified date
     * @param {String} opts.endTime Return intraday prices stopping at the specified time on the &#x60;end_date&#x60; (24-hour in &#39;hh:mm&#39; format, UTC timezone)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityIntradayPrices}
     */
    this.getSecurityIntradayPrices = function(identifier, opts) {
      return this.getSecurityIntradayPricesWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Latest Dividend Record for Security
     * Returns the latest available dividend information for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DividendRecord} and HTTP response
     */
    this.getSecurityLatestDividendRecordWithHttpInfo = function(identifier) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityLatestDividendRecord");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DividendRecord;
      var endpoint = '/securities/{identifier}/dividends/latest'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Latest Dividend Record for Security
     * Returns the latest available dividend information for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DividendRecord}
     */
    this.getSecurityLatestDividendRecord = function(identifier) {
      return this.getSecurityLatestDividendRecordWithHttpInfo(identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Latest Earnings Record for Security
     * Returns latest available earnings information for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EarningsRecord} and HTTP response
     */
    this.getSecurityLatestEarningsRecordWithHttpInfo = function(identifier) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityLatestEarningsRecord");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EarningsRecord;
      var endpoint = '/securities/{identifier}/earnings/latest'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Latest Earnings Record for Security
     * Returns latest available earnings information for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EarningsRecord}
     */
    this.getSecurityLatestEarningsRecord = function(identifier) {
      return this.getSecurityLatestEarningsRecordWithHttpInfo(identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Accumulation/Distribution Index
     * The Accumulation / Distribution Indicator is a volume-based technical indicator which uses the relationship between the stock&#x60;s price and volume flow to determine the underlying trend of a stock, up, down, or sideways trend of a stock.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityAccumulationDistributionIndex} and HTTP response
     */
    this.getSecurityPriceTechnicalsAdiWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsAdi");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityAccumulationDistributionIndex;
      var endpoint = '/securities/{identifier}/prices/technicals/adi'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Accumulation/Distribution Index
     * The Accumulation / Distribution Indicator is a volume-based technical indicator which uses the relationship between the stock&#x60;s price and volume flow to determine the underlying trend of a stock, up, down, or sideways trend of a stock.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityAccumulationDistributionIndex}
     */
    this.getSecurityPriceTechnicalsAdi = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsAdiWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Average Daily Trading Volume
     * Average Daily Trading Volume is the average number of shares traded over a given period, usually between 20 to 30 trading days.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Average Daily Trading Volume (default to 22)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityAverageDailyTradingVolume} and HTTP response
     */
    this.getSecurityPriceTechnicalsAdtvWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsAdtv");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityAverageDailyTradingVolume;
      var endpoint = '/securities/{identifier}/prices/technicals/adtv'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Average Daily Trading Volume
     * Average Daily Trading Volume is the average number of shares traded over a given period, usually between 20 to 30 trading days.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Average Daily Trading Volume (default to 22)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityAverageDailyTradingVolume}
     */
    this.getSecurityPriceTechnicalsAdtv = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsAdtvWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Average Directional Index
     * The Average Directional Index indicator is often used to identify decreasing or increasing price momentum for an underlying security, it is composed of a total of three indicators, the current trendline (adx), a positive directional indicator (di_pos), and a negative directional indicator (di_neg).
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Average Directional Index (default to 14)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityAverageDirectionalIndex} and HTTP response
     */
    this.getSecurityPriceTechnicalsAdxWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsAdx");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityAverageDirectionalIndex;
      var endpoint = '/securities/{identifier}/prices/technicals/adx'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Average Directional Index
     * The Average Directional Index indicator is often used to identify decreasing or increasing price momentum for an underlying security, it is composed of a total of three indicators, the current trendline (adx), a positive directional indicator (di_pos), and a negative directional indicator (di_neg).
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Average Directional Index (default to 14)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityAverageDirectionalIndex}
     */
    this.getSecurityPriceTechnicalsAdx = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsAdxWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Awesome Oscillator
     * The Awesome Oscillator (ao) is a momentum indicator and is calculated by taking the difference between the latest 5 period simple moving average and the 34 period simple moving average. Rather than using the closing price like other indicators, the Awesome Oscillator uses the latest period&#x60;s midpoint value (period_high - period_low / 2). The Awesome Oscillator is useful in identifying and trading, zero-line crossovers, twin-peaks trading, and bullish/bearish saucers - Awesome Oscillator is often aggregated with additional technical indicators.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.shortPeriod The number of observations, per period, to calculate short period Simple Moving Average of the Awesome Oscillator (default to 5)
     * @param {Number} opts.longPeriod The number of observations, per period, to calculate long period Simple Moving Average of the Awesome Oscillator (default to 34)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityAwesomeOscillator} and HTTP response
     */
    this.getSecurityPriceTechnicalsAoWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsAo");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'short_period': opts['shortPeriod'],
        'long_period': opts['longPeriod'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityAwesomeOscillator;
      var endpoint = '/securities/{identifier}/prices/technicals/ao'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Awesome Oscillator
     * The Awesome Oscillator (ao) is a momentum indicator and is calculated by taking the difference between the latest 5 period simple moving average and the 34 period simple moving average. Rather than using the closing price like other indicators, the Awesome Oscillator uses the latest period&#x60;s midpoint value (period_high - period_low / 2). The Awesome Oscillator is useful in identifying and trading, zero-line crossovers, twin-peaks trading, and bullish/bearish saucers - Awesome Oscillator is often aggregated with additional technical indicators.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.shortPeriod The number of observations, per period, to calculate short period Simple Moving Average of the Awesome Oscillator (default to 5)
     * @param {Number} opts.longPeriod The number of observations, per period, to calculate long period Simple Moving Average of the Awesome Oscillator (default to 34)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityAwesomeOscillator}
     */
    this.getSecurityPriceTechnicalsAo = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsAoWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Average True Range
     * The Average True Range (ATR) is a non-directional market volatility indicator often used to generate stop-out or entry indications. An increasing or expanding ATR typically indicates higher volatility, and a decreasing ATR indicates sideways price action and lower volatility.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Average True Range (default to 14)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityAverageTrueRange} and HTTP response
     */
    this.getSecurityPriceTechnicalsAtrWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsAtr");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityAverageTrueRange;
      var endpoint = '/securities/{identifier}/prices/technicals/atr'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Average True Range
     * The Average True Range (ATR) is a non-directional market volatility indicator often used to generate stop-out or entry indications. An increasing or expanding ATR typically indicates higher volatility, and a decreasing ATR indicates sideways price action and lower volatility.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Average True Range (default to 14)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityAverageTrueRange}
     */
    this.getSecurityPriceTechnicalsAtr = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsAtrWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Bollinger Bands
     * Bollinger Bands can be a useful technical analysis tool for generating oversold or overbought indicators. Bollinger Bands are composed of three lines, a simple moving average (middle band) and an upper and lower band – the upper and lower bands are typically 2 standard deviations +/- from a 20-day simple moving average, but can be modified. Traders typically consider an underlying security to be overbought as the underlying&#x60;s price moves towards the upper band and oversold as the underlying price moves towards the lower band.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Bollinger Bands (default to 20)
     * @param {Number} opts.standardDeviations The number of standard deviations to calculate the upper and lower bands of the Bollinger Bands (default to 2.0)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Bollinger Bands (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityBollingerBands} and HTTP response
     */
    this.getSecurityPriceTechnicalsBbWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsBb");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'standard_deviations': opts['standardDeviations'],
        'price_key': opts['priceKey'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityBollingerBands;
      var endpoint = '/securities/{identifier}/prices/technicals/bb'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Bollinger Bands
     * Bollinger Bands can be a useful technical analysis tool for generating oversold or overbought indicators. Bollinger Bands are composed of three lines, a simple moving average (middle band) and an upper and lower band – the upper and lower bands are typically 2 standard deviations +/- from a 20-day simple moving average, but can be modified. Traders typically consider an underlying security to be overbought as the underlying&#x60;s price moves towards the upper band and oversold as the underlying price moves towards the lower band.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Bollinger Bands (default to 20)
     * @param {Number} opts.standardDeviations The number of standard deviations to calculate the upper and lower bands of the Bollinger Bands (default to 2.0)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Bollinger Bands (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityBollingerBands}
     */
    this.getSecurityPriceTechnicalsBb = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsBbWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Commodity Channel Index
     * The Commodity Channel Index (CCI) is a technical indicator used to generate buy and sell signals by indicating periods of strength and weakness in the market. CCI signals that fall below -100 are often perceived as weakness in the underlying price movement and CCI signals that rise above 100 indicate strength behind the underlying price movement.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Commodity Channel Index (default to 20)
     * @param {Number} opts.constant The number of observations, per period, to calculate Commodity Channel Index (default to 0.015)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityCommodityChannelIndex} and HTTP response
     */
    this.getSecurityPriceTechnicalsCciWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsCci");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'constant': opts['constant'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityCommodityChannelIndex;
      var endpoint = '/securities/{identifier}/prices/technicals/cci'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Commodity Channel Index
     * The Commodity Channel Index (CCI) is a technical indicator used to generate buy and sell signals by indicating periods of strength and weakness in the market. CCI signals that fall below -100 are often perceived as weakness in the underlying price movement and CCI signals that rise above 100 indicate strength behind the underlying price movement.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Commodity Channel Index (default to 20)
     * @param {Number} opts.constant The number of observations, per period, to calculate Commodity Channel Index (default to 0.015)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityCommodityChannelIndex}
     */
    this.getSecurityPriceTechnicalsCci = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsCciWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Chaikin Money Flow
     * The Chaikin Money Flow (CMF) utilizes exponential moving averages as an indicator to monitor the flow of money and momentum. The CMF indicator oscillates around a midrange 0-line and ranges between 100 and -100.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Chaikin Money Flow (default to 20)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityChaikinMoneyFlow} and HTTP response
     */
    this.getSecurityPriceTechnicalsCmfWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsCmf");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityChaikinMoneyFlow;
      var endpoint = '/securities/{identifier}/prices/technicals/cmf'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Chaikin Money Flow
     * The Chaikin Money Flow (CMF) utilizes exponential moving averages as an indicator to monitor the flow of money and momentum. The CMF indicator oscillates around a midrange 0-line and ranges between 100 and -100.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Chaikin Money Flow (default to 20)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityChaikinMoneyFlow}
     */
    this.getSecurityPriceTechnicalsCmf = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsCmfWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Donchian Channel
     * The Donchian Channel consists of an Upper Bound (upper_bound) and Lower Bound (lower_bound) that track the recent highs and lows and is often used to signal entry and exit points for a position. As the price of the underlying symbol increases the Upper Bound raises, if the price becomes range bound the Upper Bound will remain flat and if the price begins to decrease, the Upper Bound will fall (and vice-versa for the Lower Bound).
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Donchian Channel (default to 20)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Donchian Channel (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityDonchianChannel} and HTTP response
     */
    this.getSecurityPriceTechnicalsDcWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsDc");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'price_key': opts['priceKey'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityDonchianChannel;
      var endpoint = '/securities/{identifier}/prices/technicals/dc'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Donchian Channel
     * The Donchian Channel consists of an Upper Bound (upper_bound) and Lower Bound (lower_bound) that track the recent highs and lows and is often used to signal entry and exit points for a position. As the price of the underlying symbol increases the Upper Bound raises, if the price becomes range bound the Upper Bound will remain flat and if the price begins to decrease, the Upper Bound will fall (and vice-versa for the Lower Bound).
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Donchian Channel (default to 20)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Donchian Channel (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityDonchianChannel}
     */
    this.getSecurityPriceTechnicalsDc = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsDcWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Detrended Price Oscillator
     * The Detrended Price Oscillator (DPO) signals the peaks and troughs of the underlying symbol’s price for a set period of time and is often used by traders to estimate future peaks and troughs using this as guidance to enter or exit a position.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Detrended Price Oscillator (default to 20)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Detrended Price Oscillator (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityDetrendedPriceOscillator} and HTTP response
     */
    this.getSecurityPriceTechnicalsDpoWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsDpo");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'price_key': opts['priceKey'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityDetrendedPriceOscillator;
      var endpoint = '/securities/{identifier}/prices/technicals/dpo'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Detrended Price Oscillator
     * The Detrended Price Oscillator (DPO) signals the peaks and troughs of the underlying symbol’s price for a set period of time and is often used by traders to estimate future peaks and troughs using this as guidance to enter or exit a position.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Detrended Price Oscillator (default to 20)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Detrended Price Oscillator (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityDetrendedPriceOscillator}
     */
    this.getSecurityPriceTechnicalsDpo = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsDpoWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Ease of Movement
     * The Ease of Movement (EOM) is a volume based oscillator that fluctuates around a midrange 0-line into positive and negative values. Positive values indicate that the underlying symbol&#x60;s price is rising with relative ease and negative value indicates the underlying symbol&#x60;s price is failing with relative ease.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Ease of Movement (default to 20)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityEaseOfMovement} and HTTP response
     */
    this.getSecurityPriceTechnicalsEomWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsEom");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityEaseOfMovement;
      var endpoint = '/securities/{identifier}/prices/technicals/eom'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Ease of Movement
     * The Ease of Movement (EOM) is a volume based oscillator that fluctuates around a midrange 0-line into positive and negative values. Positive values indicate that the underlying symbol&#x60;s price is rising with relative ease and negative value indicates the underlying symbol&#x60;s price is failing with relative ease.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Ease of Movement (default to 20)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityEaseOfMovement}
     */
    this.getSecurityPriceTechnicalsEom = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsEomWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Force Index
     * The Force Index (FI) is an oscillator that takes into account the intensity of an underlying symbol&#x60;s price movement and its corresponding volume. It is used to confirm price breakouts and signal underlying trends.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityForceIndex} and HTTP response
     */
    this.getSecurityPriceTechnicalsFiWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsFi");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityForceIndex;
      var endpoint = '/securities/{identifier}/prices/technicals/fi'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Force Index
     * The Force Index (FI) is an oscillator that takes into account the intensity of an underlying symbol&#x60;s price movement and its corresponding volume. It is used to confirm price breakouts and signal underlying trends.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityForceIndex}
     */
    this.getSecurityPriceTechnicalsFi = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsFiWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Ichimoku Kinko Hyo
     * The Ichimoku Kinko Hyo was designed to be an all-in-one trading indicator that could help traders determine momentum, support, and resistance.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.lowPeriod The number of observations, per period, to calculate Tenkan Sen (Conversion Line) of Ichimoku Kinko Hyo (default to 9)
     * @param {Number} opts.mediumPeriod The number of observations, per period, to calculate Kijun Sen (Base Line), Senkou Span A (Leading Span A), and Chikou Span (Lagging Span) of Ichimoku Kinko Hyo (default to 26)
     * @param {Number} opts.highPeriod The number of observations, per period, to calculate Senkou Span B (Leading Span B) of Ichimoku Kinko Hyo (default to 52)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityIchimokuKinkoHyo} and HTTP response
     */
    this.getSecurityPriceTechnicalsIchimokuWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsIchimoku");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'low_period': opts['lowPeriod'],
        'medium_period': opts['mediumPeriod'],
        'high_period': opts['highPeriod'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityIchimokuKinkoHyo;
      var endpoint = '/securities/{identifier}/prices/technicals/ichimoku'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Ichimoku Kinko Hyo
     * The Ichimoku Kinko Hyo was designed to be an all-in-one trading indicator that could help traders determine momentum, support, and resistance.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.lowPeriod The number of observations, per period, to calculate Tenkan Sen (Conversion Line) of Ichimoku Kinko Hyo (default to 9)
     * @param {Number} opts.mediumPeriod The number of observations, per period, to calculate Kijun Sen (Base Line), Senkou Span A (Leading Span A), and Chikou Span (Lagging Span) of Ichimoku Kinko Hyo (default to 26)
     * @param {Number} opts.highPeriod The number of observations, per period, to calculate Senkou Span B (Leading Span B) of Ichimoku Kinko Hyo (default to 52)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityIchimokuKinkoHyo}
     */
    this.getSecurityPriceTechnicalsIchimoku = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsIchimokuWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Keltner Channel
     * The Keltner Channel is a volatility based signal, with upper, middle, and lower bands. It is often used at market open, when the largest moves tend to occur. In general, traders tend to buy if the price breaks up above the upper band or sell short if the price drops below the lower band.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Kelter Channel (default to 10)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityKeltnerChannel} and HTTP response
     */
    this.getSecurityPriceTechnicalsKcWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsKc");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityKeltnerChannel;
      var endpoint = '/securities/{identifier}/prices/technicals/kc'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Keltner Channel
     * The Keltner Channel is a volatility based signal, with upper, middle, and lower bands. It is often used at market open, when the largest moves tend to occur. In general, traders tend to buy if the price breaks up above the upper band or sell short if the price drops below the lower band.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Kelter Channel (default to 10)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityKeltnerChannel}
     */
    this.getSecurityPriceTechnicalsKc = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsKcWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Know Sure Thing
     * The Know Sure Thing indicator (KST) is a momentum based oscillator that is calculated by measuring the momentum of four separate price cycles. KST fluctuates above and below a zero line and is used to identify overbought and oversold conditions, and is often used with additional indicators to boost signal strength.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.roc1 The number of observations, per period, to calculate the rate-of-change for RCMA1 (default to 10)
     * @param {Number} opts.roc2 The number of observations, per period, to calculate the rate-of-change for RCMA2 (default to 15)
     * @param {Number} opts.roc3 The number of observations, per period, to calculate the rate-of-change for RCMA3 (default to 20)
     * @param {Number} opts.roc4 The number of observations, per period, to calculate the rate-of-change for RCMA4 (default to 30)
     * @param {Number} opts.sma1 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA1 (default to 10)
     * @param {Number} opts.sma2 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA2 (default to 10)
     * @param {Number} opts.sma3 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA3 (default to 10)
     * @param {Number} opts.sma4 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA4 (default to 15)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Know Sure Thing (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityKnowSureThing} and HTTP response
     */
    this.getSecurityPriceTechnicalsKstWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsKst");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'roc1': opts['roc1'],
        'roc2': opts['roc2'],
        'roc3': opts['roc3'],
        'roc4': opts['roc4'],
        'sma1': opts['sma1'],
        'sma2': opts['sma2'],
        'sma3': opts['sma3'],
        'sma4': opts['sma4'],
        'price_key': opts['priceKey'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityKnowSureThing;
      var endpoint = '/securities/{identifier}/prices/technicals/kst'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Know Sure Thing
     * The Know Sure Thing indicator (KST) is a momentum based oscillator that is calculated by measuring the momentum of four separate price cycles. KST fluctuates above and below a zero line and is used to identify overbought and oversold conditions, and is often used with additional indicators to boost signal strength.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.roc1 The number of observations, per period, to calculate the rate-of-change for RCMA1 (default to 10)
     * @param {Number} opts.roc2 The number of observations, per period, to calculate the rate-of-change for RCMA2 (default to 15)
     * @param {Number} opts.roc3 The number of observations, per period, to calculate the rate-of-change for RCMA3 (default to 20)
     * @param {Number} opts.roc4 The number of observations, per period, to calculate the rate-of-change for RCMA4 (default to 30)
     * @param {Number} opts.sma1 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA1 (default to 10)
     * @param {Number} opts.sma2 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA2 (default to 10)
     * @param {Number} opts.sma3 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA3 (default to 10)
     * @param {Number} opts.sma4 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA4 (default to 15)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Know Sure Thing (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityKnowSureThing}
     */
    this.getSecurityPriceTechnicalsKst = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsKstWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Moving Average Convergence Divergence
     * Moving average convergence divergence (MACD) is a trend-following momentum oscillator that consists of three indicators: (1) a 12 period short-term exponential moving average (EMA) a 26 period long-term EMA and a 9 period EMA signal line. Traders using MACD often look for signal line crossovers, centerline crossovers, and EMA divergences to indicate the momentum and underlying trend of a security&#x60;s price.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.fastPeriod The number of observations, per period, to calculate the fast moving Exponential Moving Average for Moving Average Convergence Divergence (default to 12)
     * @param {Number} opts.slowPeriod The number of observations, per period, to calculate the slow moving Exponential Moving Average for Moving Average Convergence Divergence (default to 26)
     * @param {Number} opts.signalPeriod The number of observations, per period, to calculate the signal line for Moving Average Convergence Divergence (default to 9)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Moving Average Convergence Divergence (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityMovingAverageConvergenceDivergence} and HTTP response
     */
    this.getSecurityPriceTechnicalsMacdWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsMacd");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'fast_period': opts['fastPeriod'],
        'slow_period': opts['slowPeriod'],
        'signal_period': opts['signalPeriod'],
        'price_key': opts['priceKey'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityMovingAverageConvergenceDivergence;
      var endpoint = '/securities/{identifier}/prices/technicals/macd'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Moving Average Convergence Divergence
     * Moving average convergence divergence (MACD) is a trend-following momentum oscillator that consists of three indicators: (1) a 12 period short-term exponential moving average (EMA) a 26 period long-term EMA and a 9 period EMA signal line. Traders using MACD often look for signal line crossovers, centerline crossovers, and EMA divergences to indicate the momentum and underlying trend of a security&#x60;s price.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.fastPeriod The number of observations, per period, to calculate the fast moving Exponential Moving Average for Moving Average Convergence Divergence (default to 12)
     * @param {Number} opts.slowPeriod The number of observations, per period, to calculate the slow moving Exponential Moving Average for Moving Average Convergence Divergence (default to 26)
     * @param {Number} opts.signalPeriod The number of observations, per period, to calculate the signal line for Moving Average Convergence Divergence (default to 9)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Moving Average Convergence Divergence (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityMovingAverageConvergenceDivergence}
     */
    this.getSecurityPriceTechnicalsMacd = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsMacdWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Money Flow Index
     * The Money Flow Index (MFI) is a technical oscillator that incorporates both price and volume, moving between 0 and 100. Traders often consider a MFI above 80 as overbought conditions and below 20 as oversold conditions.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Money Flow Index (default to 14)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityMoneyFlowIndex} and HTTP response
     */
    this.getSecurityPriceTechnicalsMfiWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsMfi");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityMoneyFlowIndex;
      var endpoint = '/securities/{identifier}/prices/technicals/mfi'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Money Flow Index
     * The Money Flow Index (MFI) is a technical oscillator that incorporates both price and volume, moving between 0 and 100. Traders often consider a MFI above 80 as overbought conditions and below 20 as oversold conditions.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Money Flow Index (default to 14)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityMoneyFlowIndex}
     */
    this.getSecurityPriceTechnicalsMfi = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsMfiWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Mass Index
     * The mass index (MI) is a technical indicator used by traders to predict trend reversals. A trend reversal signal is said to occur when the 25-day MI reaches 27.0 and then falls below 26.0.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.emaPeriod The number of observations, per period, to calculate the single Exponential Moving Average and the Double Exponential Moving Average for Mass Index (default to 9)
     * @param {Number} opts.sumPeriod The number of observations, per period, to calculate the sum of the Exponetinal Moving Average Ratios for Mass Index (default to 25)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityMassIndex} and HTTP response
     */
    this.getSecurityPriceTechnicalsMiWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsMi");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'ema_period': opts['emaPeriod'],
        'sum_period': opts['sumPeriod'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityMassIndex;
      var endpoint = '/securities/{identifier}/prices/technicals/mi'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Mass Index
     * The mass index (MI) is a technical indicator used by traders to predict trend reversals. A trend reversal signal is said to occur when the 25-day MI reaches 27.0 and then falls below 26.0.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.emaPeriod The number of observations, per period, to calculate the single Exponential Moving Average and the Double Exponential Moving Average for Mass Index (default to 9)
     * @param {Number} opts.sumPeriod The number of observations, per period, to calculate the sum of the Exponetinal Moving Average Ratios for Mass Index (default to 25)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityMassIndex}
     */
    this.getSecurityPriceTechnicalsMi = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsMiWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Negative Volume Index
     * The negative volume index (NVI) is often referred to as the &#x60;smart money indicator.&#x60; It works by the assumption that smart money (institutional money) is at work when volume decreases and vice versa when volume increases. NVI starts at 1000 and increases in regard to the percentage price change when volume decreases over a 255-day EMA period. Traders often use this technical indicator when researching broder markets and indices.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityNegativeVolumeIndex} and HTTP response
     */
    this.getSecurityPriceTechnicalsNviWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsNvi");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityNegativeVolumeIndex;
      var endpoint = '/securities/{identifier}/prices/technicals/nvi'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Negative Volume Index
     * The negative volume index (NVI) is often referred to as the &#x60;smart money indicator.&#x60; It works by the assumption that smart money (institutional money) is at work when volume decreases and vice versa when volume increases. NVI starts at 1000 and increases in regard to the percentage price change when volume decreases over a 255-day EMA period. Traders often use this technical indicator when researching broder markets and indices.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityNegativeVolumeIndex}
     */
    this.getSecurityPriceTechnicalsNvi = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsNviWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * On-balance Volume
     * On-balance volume (OBV) is a leading momentum indicator that uses the increase/decrease flow in volume to predict upcoming stock price changes. When both OBV and a security&#x60;s price are making higher highs, it is presumed the upward trend is likely to continue and vice versa.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityOnBalanceVolume} and HTTP response
     */
    this.getSecurityPriceTechnicalsObvWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsObv");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityOnBalanceVolume;
      var endpoint = '/securities/{identifier}/prices/technicals/obv'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * On-balance Volume
     * On-balance volume (OBV) is a leading momentum indicator that uses the increase/decrease flow in volume to predict upcoming stock price changes. When both OBV and a security&#x60;s price are making higher highs, it is presumed the upward trend is likely to continue and vice versa.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityOnBalanceVolume}
     */
    this.getSecurityPriceTechnicalsObv = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsObvWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * On-balance Volume Mean
     * On-balance volume mean (OBVM) is a leading momentum indicator that uses the increase/decrease flow in volume to predict upcoming stock price changes. The difference between OBV and OBVM is that OBVM takes the mean average of a provided period.  When both OBVM and a security&#x60;s price are making higher highs, it is presumed the upward trend is likely to continue and vice versa.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate On-balance Volume Mean (default to 10)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityOnBalanceVolumeMean} and HTTP response
     */
    this.getSecurityPriceTechnicalsObvMeanWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsObvMean");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityOnBalanceVolumeMean;
      var endpoint = '/securities/{identifier}/prices/technicals/obv_mean'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * On-balance Volume Mean
     * On-balance volume mean (OBVM) is a leading momentum indicator that uses the increase/decrease flow in volume to predict upcoming stock price changes. The difference between OBV and OBVM is that OBVM takes the mean average of a provided period.  When both OBVM and a security&#x60;s price are making higher highs, it is presumed the upward trend is likely to continue and vice versa.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate On-balance Volume Mean (default to 10)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityOnBalanceVolumeMean}
     */
    this.getSecurityPriceTechnicalsObvMean = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsObvMeanWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Relative Strength Index
     * Relative strength index (RSI) is a momentum oscillator that ranges between 0 and 100. Traders believe that an RSI value over 70 indicates that a security is overbought and an RSI under 30 indicates that a security is oversold.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Relative Strength Index (default to 14)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Relative Strength Index (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityRelativeStrengthIndex} and HTTP response
     */
    this.getSecurityPriceTechnicalsRsiWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsRsi");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'price_key': opts['priceKey'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityRelativeStrengthIndex;
      var endpoint = '/securities/{identifier}/prices/technicals/rsi'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Relative Strength Index
     * Relative strength index (RSI) is a momentum oscillator that ranges between 0 and 100. Traders believe that an RSI value over 70 indicates that a security is overbought and an RSI under 30 indicates that a security is oversold.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Relative Strength Index (default to 14)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Relative Strength Index (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityRelativeStrengthIndex}
     */
    this.getSecurityPriceTechnicalsRsi = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsRsiWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Simple Moving Average
     * A simple moving average (SMA) adds recent prices for a specified period and divides the total by that same number of periods. SMA is typically used to indicate whether a security is in an uptrend or downtrend and can also be combined with a long-term moving average to improve the signal&#x60;s abilities.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Simple Moving Average (default to 20)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Simple Moving Average (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecuritySimpleMovingAverage} and HTTP response
     */
    this.getSecurityPriceTechnicalsSmaWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsSma");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'price_key': opts['priceKey'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecuritySimpleMovingAverage;
      var endpoint = '/securities/{identifier}/prices/technicals/sma'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Simple Moving Average
     * A simple moving average (SMA) adds recent prices for a specified period and divides the total by that same number of periods. SMA is typically used to indicate whether a security is in an uptrend or downtrend and can also be combined with a long-term moving average to improve the signal&#x60;s abilities.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Simple Moving Average (default to 20)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating Simple Moving Average (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecuritySimpleMovingAverage}
     */
    this.getSecurityPriceTechnicalsSma = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsSmaWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Stochastic Oscillator
     * The Stochastic Oscillator (SO) is a range-bound momentum indicator that ranges from 0 to 100 and follows the velocity of the momentum itself, not the underlying price or volume. When SO is above 80 it indicates that a security is trading at the high end of its period&#x60;s high-low range and vice versa if the reading is below 20.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate %K of Stochastic Oscillator (default to 14)
     * @param {Number} opts.signalPeriod The number of observations, per period, to calculate the %D (the Simple Moving Average of %K) as a signal line for Stochastic Oscillator (default to 3)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityStochasticOscillator} and HTTP response
     */
    this.getSecurityPriceTechnicalsSrWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsSr");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'signal_period': opts['signalPeriod'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityStochasticOscillator;
      var endpoint = '/securities/{identifier}/prices/technicals/sr'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Stochastic Oscillator
     * The Stochastic Oscillator (SO) is a range-bound momentum indicator that ranges from 0 to 100 and follows the velocity of the momentum itself, not the underlying price or volume. When SO is above 80 it indicates that a security is trading at the high end of its period&#x60;s high-low range and vice versa if the reading is below 20.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate %K of Stochastic Oscillator (default to 14)
     * @param {Number} opts.signalPeriod The number of observations, per period, to calculate the %D (the Simple Moving Average of %K) as a signal line for Stochastic Oscillator (default to 3)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityStochasticOscillator}
     */
    this.getSecurityPriceTechnicalsSr = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsSrWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Triple Exponential Average
     * The Triple Exponential Average (TEA) is a momentum indicator used to identify when a security is oversold and overbought. By exponentially smoothing out the underlying security&#x60;s moving average, the TEA  filters out insignificant price movements. A positive TEA is often believed to indicate momentum is increasing and a negative TEA indicates that momentum is decreasing.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Exponential Moving Average for Triple Exponential Average (default to 15)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityTripleExponentialAverage} and HTTP response
     */
    this.getSecurityPriceTechnicalsTrixWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsTrix");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityTripleExponentialAverage;
      var endpoint = '/securities/{identifier}/prices/technicals/trix'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Triple Exponential Average
     * The Triple Exponential Average (TEA) is a momentum indicator used to identify when a security is oversold and overbought. By exponentially smoothing out the underlying security&#x60;s moving average, the TEA  filters out insignificant price movements. A positive TEA is often believed to indicate momentum is increasing and a negative TEA indicates that momentum is decreasing.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Exponential Moving Average for Triple Exponential Average (default to 15)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityTripleExponentialAverage}
     */
    this.getSecurityPriceTechnicalsTrix = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsTrixWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * True Strength Index
     * The True Strength Index (TSI) is a momentum oscillator used to identify building trends and trend reversals, typically by signalling overbought and oversold conditions. TSI fluctuates between positive and negative values, and traders typically combine its signal with other momentum oscillators to increase its strength. When TSI crosses the signal line into positive territory it is presumed to be an entrance opportunity and vice versa when the TSI crosses into negative territory.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.lowPeriod The number of observations, per period, to calculate low period Exponential Moving Average for smoothing in True Strength Index (default to 13)
     * @param {Number} opts.highPeriod The number of observations, per period, to calculate high period Exponential Moving Average for smoothing in True Strength Index (default to 25)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating True Strength Index (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityTrueStrengthIndex} and HTTP response
     */
    this.getSecurityPriceTechnicalsTsiWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsTsi");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'low_period': opts['lowPeriod'],
        'high_period': opts['highPeriod'],
        'price_key': opts['priceKey'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityTrueStrengthIndex;
      var endpoint = '/securities/{identifier}/prices/technicals/tsi'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * True Strength Index
     * The True Strength Index (TSI) is a momentum oscillator used to identify building trends and trend reversals, typically by signalling overbought and oversold conditions. TSI fluctuates between positive and negative values, and traders typically combine its signal with other momentum oscillators to increase its strength. When TSI crosses the signal line into positive territory it is presumed to be an entrance opportunity and vice versa when the TSI crosses into negative territory.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.lowPeriod The number of observations, per period, to calculate low period Exponential Moving Average for smoothing in True Strength Index (default to 13)
     * @param {Number} opts.highPeriod The number of observations, per period, to calculate high period Exponential Moving Average for smoothing in True Strength Index (default to 25)
     * @param {module:model/String} opts.priceKey The Stock Price field to use when calculating True Strength Index (default to close)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityTrueStrengthIndex}
     */
    this.getSecurityPriceTechnicalsTsi = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsTsiWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Ultimate Oscillator
     * The Ultimate Oscillator (UO) is a range bound technical indicator that moves between 0 and 100 and is calculated with 3 timeframes, typically 7, 14, and 28 day periods. When UO&#x60;s value is above 70 a security is categorized as overbought and when UO&#x60;s value is below 30 a security is categorized as oversold.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.shortPeriod The number of observations, per period, to calculate the short period for Ultimate Oscillator (default to 7)
     * @param {Number} opts.mediumPeriod The number of observations, per period, to calculate the medium period for Ultimate Oscillator (default to 14)
     * @param {Number} opts.longPeriod The number of observations, per period, to calculate the long period for Ultimate Oscillator (default to 28)
     * @param {Number} opts.shortWeight The weight of short Buying Pressure average for Ultimate Oscillator (default to 4.0)
     * @param {Number} opts.mediumWeight The weight of medium Buying Pressure average for Ultimate Oscillator (default to 2.0)
     * @param {Number} opts.longWeight The weight of long Buying Pressure average for Ultimate Oscillator (default to 1.0)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityUltimateOscillator} and HTTP response
     */
    this.getSecurityPriceTechnicalsUoWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsUo");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'short_period': opts['shortPeriod'],
        'medium_period': opts['mediumPeriod'],
        'long_period': opts['longPeriod'],
        'short_weight': opts['shortWeight'],
        'medium_weight': opts['mediumWeight'],
        'long_weight': opts['longWeight'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityUltimateOscillator;
      var endpoint = '/securities/{identifier}/prices/technicals/uo'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Ultimate Oscillator
     * The Ultimate Oscillator (UO) is a range bound technical indicator that moves between 0 and 100 and is calculated with 3 timeframes, typically 7, 14, and 28 day periods. When UO&#x60;s value is above 70 a security is categorized as overbought and when UO&#x60;s value is below 30 a security is categorized as oversold.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.shortPeriod The number of observations, per period, to calculate the short period for Ultimate Oscillator (default to 7)
     * @param {Number} opts.mediumPeriod The number of observations, per period, to calculate the medium period for Ultimate Oscillator (default to 14)
     * @param {Number} opts.longPeriod The number of observations, per period, to calculate the long period for Ultimate Oscillator (default to 28)
     * @param {Number} opts.shortWeight The weight of short Buying Pressure average for Ultimate Oscillator (default to 4.0)
     * @param {Number} opts.mediumWeight The weight of medium Buying Pressure average for Ultimate Oscillator (default to 2.0)
     * @param {Number} opts.longWeight The weight of long Buying Pressure average for Ultimate Oscillator (default to 1.0)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityUltimateOscillator}
     */
    this.getSecurityPriceTechnicalsUo = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsUoWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Vortex Indicator
     * The Vortex Indicator (VI) is composed of an uptrend line (VI+) and a downtrend line (VI-). When VI+ crosses VI- from below it typically indicates an entry into a given security. When VI- crosses VI+ from below it typically triggers an exit and that the current trend is reversing course.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Vortex Indicator (default to 14)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityVortexIndicator} and HTTP response
     */
    this.getSecurityPriceTechnicalsViWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsVi");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityVortexIndicator;
      var endpoint = '/securities/{identifier}/prices/technicals/vi'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Vortex Indicator
     * The Vortex Indicator (VI) is composed of an uptrend line (VI+) and a downtrend line (VI-). When VI+ crosses VI- from below it typically indicates an entry into a given security. When VI- crosses VI+ from below it typically triggers an exit and that the current trend is reversing course.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to calculate Vortex Indicator (default to 14)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityVortexIndicator}
     */
    this.getSecurityPriceTechnicalsVi = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsViWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Volume-price Trend
     * The volume price trend (VPT) is a technical indicator that uses price &amp; volume to determine whether a trend is established. Typically, when a security is trending upwards, there is more volume on positive days than negative ones, and as a result VPT should be increasing on these days as well. However, if VPT fails to increase past its previous high during an outbreak, this is suggested to indicate the rally is losing strength.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityVolumePriceTrend} and HTTP response
     */
    this.getSecurityPriceTechnicalsVptWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsVpt");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityVolumePriceTrend;
      var endpoint = '/securities/{identifier}/prices/technicals/vpt'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Volume-price Trend
     * The volume price trend (VPT) is a technical indicator that uses price &amp; volume to determine whether a trend is established. Typically, when a security is trending upwards, there is more volume on positive days than negative ones, and as a result VPT should be increasing on these days as well. However, if VPT fails to increase past its previous high during an outbreak, this is suggested to indicate the rally is losing strength.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityVolumePriceTrend}
     */
    this.getSecurityPriceTechnicalsVpt = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsVptWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Volume Weighted Average Price
     * Volume Weighted Average Price (VWAP) is a lagging technical indicator that is used in combination with a security&#x60;s price. When the underlying price rises above its VWAP, it is often interpreted as a bullish signal, and vice versa in the opposite direction.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityVolumeWeightedAveragePrice} and HTTP response
     */
    this.getSecurityPriceTechnicalsVwapWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsVwap");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityVolumeWeightedAveragePrice;
      var endpoint = '/securities/{identifier}/prices/technicals/vwap'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Volume Weighted Average Price
     * Volume Weighted Average Price (VWAP) is a lagging technical indicator that is used in combination with a security&#x60;s price. When the underlying price rises above its VWAP, it is often interpreted as a bullish signal, and vice versa in the opposite direction.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityVolumeWeightedAveragePrice}
     */
    this.getSecurityPriceTechnicalsVwap = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsVwapWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Williams %R
     * Williams %R is a momentum indicator used to determine overbought and oversold environments for a security and fluctuates between 0 and -100. When Williams %R is above -20 the security is considered to be overbought and when Williams %R is under -80 the security is considered to be oversold.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to look-back when calculating Williams %R (default to 14)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityWilliamsR} and HTTP response
     */
    this.getSecurityPriceTechnicalsWrWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityPriceTechnicalsWr");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'period': opts['period'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityWilliamsR;
      var endpoint = '/securities/{identifier}/prices/technicals/wr'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Williams %R
     * Williams %R is a momentum indicator used to determine overbought and oversold environments for a security and fluctuates between 0 and -100. When Williams %R is above -20 the security is considered to be overbought and when Williams %R is under -80 the security is considered to be oversold.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.period The number of observations, per period, to look-back when calculating Williams %R (default to 14)
     * @param {String} opts.startDate Return technical indicator values on or after the date
     * @param {String} opts.endDate Return technical indicator values on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityWilliamsR}
     */
    this.getSecurityPriceTechnicalsWr = function(identifier, opts) {
      return this.getSecurityPriceTechnicalsWrWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Realtime Stock Price for Security
     * Return the realtime stock price for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Return the realtime price from the specified data source. If no source is specified, the best source available is used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RealtimeStockPrice} and HTTP response
     */
    this.getSecurityRealtimePriceWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityRealtimePrice");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'source': opts['source'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RealtimeStockPrice;
      var endpoint = '/securities/{identifier}/prices/realtime'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Realtime Stock Price for Security
     * Return the realtime stock price for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source Return the realtime price from the specified data source. If no source is specified, the best source available is used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RealtimeStockPrice}
     */
    this.getSecurityRealtimePrice = function(identifier, opts) {
      return this.getSecurityRealtimePriceWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Security Replay File
     * Returns a url where the requested replay file may be downloaded from.
     * @param {module:model/String} subsource The specific source of the data being requested.
     * @param {Date} date The date for the data being requested.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityReplayFileResult} and HTTP response
     */
    this.getSecurityReplayFileWithHttpInfo = function(subsource, date) {
      var postBody = null;

      // verify the required parameter 'subsource' is set
      if (subsource === undefined || subsource === null) {
        throw new Error("Missing the required parameter 'subsource' when calling getSecurityReplayFile");
      }

      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getSecurityReplayFile");
      }


      var pathParams = {
      };
      var queryParams = {
        'subsource': subsource,
        'date': date,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SecurityReplayFileResult;
      var endpoint = '/securities/replay'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Security Replay File
     * Returns a url where the requested replay file may be downloaded from.
     * @param {module:model/String} subsource The specific source of the data being requested.
     * @param {Date} date The date for the data being requested.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecurityReplayFileResult}
     */
    this.getSecurityReplayFile = function(subsource, date) {
      return this.getSecurityReplayFileWithHttpInfo(subsource, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Realtime Stock Prices Snapshot
     * Returns all security snapshots for the queried interval with links to download.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.atDatetime The UTC date and time (with url-encoded spaces) the snapshot will cover.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecuritySnapshotsResult} and HTTP response
     */
    this.getSecuritySnapshotsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'at_datetime': opts['atDatetime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SecuritySnapshotsResult;
      var endpoint = '/securities/snapshots'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Realtime Stock Prices Snapshot
     * Returns all security snapshots for the queried interval with links to download.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.atDatetime The UTC date and time (with url-encoded spaces) the snapshot will cover.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecuritySnapshotsResult}
     */
    this.getSecuritySnapshots = function(opts) {
      return this.getSecuritySnapshotsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Stock Price Adjustments by Security
     * Returns stock price adjustments for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Return price adjustments on or after the date
     * @param {Date} opts.endDate Return price adjustments on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityStockPriceAdjustments} and HTTP response
     */
    this.getSecurityStockPriceAdjustmentsWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityStockPriceAdjustments");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityStockPriceAdjustments;
      var endpoint = '/securities/{identifier}/prices/adjustments'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Stock Price Adjustments by Security
     * Returns stock price adjustments for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Return price adjustments on or after the date
     * @param {Date} opts.endDate Return price adjustments on or before the date
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityStockPriceAdjustments}
     */
    this.getSecurityStockPriceAdjustments = function(identifier, opts) {
      return this.getSecurityStockPriceAdjustmentsWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Stock Prices by Security
     * Return end-of-day stock prices for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Return prices on or after the date
     * @param {Date} opts.endDate Return prices on or before the date
     * @param {module:model/String} opts.frequency Return stock prices in the given frequency (default to daily)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityStockPrices} and HTTP response
     */
    this.getSecurityStockPricesWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityStockPrices");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'frequency': opts['frequency'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityStockPrices;
      var endpoint = '/securities/{identifier}/prices'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Stock Prices by Security
     * Return end-of-day stock prices for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Return prices on or after the date
     * @param {Date} opts.endDate Return prices on or before the date
     * @param {module:model/String} opts.frequency Return stock prices in the given frequency (default to daily)
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityStockPrices}
     */
    this.getSecurityStockPrices = function(identifier, opts) {
      return this.getSecurityStockPricesWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Security Trades
     * Returns all trades between start time and end time, up to seven days ago for the specified source.
     * @param {module:model/String} source The specific source of the data being requested.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate The start date for the data being requested.
     * @param {String} opts.startTime The start time for the data being requested.
     * @param {Date} opts.endDate The end date for the data being requested.
     * @param {String} opts.endTime The end time for the data being requested.
     * @param {module:model/String} opts.timezone The timezone the start and end date/times use. (default to UTC)
     * @param {Number} opts.pageSize The maximum number of results to return per page. (default to 100)
     * @param {Boolean} opts.darkpoolOnly Set to true to show only darkpool trades (default to false)
     * @param {Number} opts.minSize Trades must be larger or equal to this size.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityTradesResult} and HTTP response
     */
    this.getSecurityTradesWithHttpInfo = function(source, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getSecurityTrades");
      }


      var pathParams = {
      };
      var queryParams = {
        'source': source,
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'timezone': opts['timezone'],
        'page_size': opts['pageSize'],
        'darkpool_only': opts['darkpoolOnly'],
        'min_size': opts['minSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SecurityTradesResult;
      var endpoint = '/securities/trades'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Security Trades
     * Returns all trades between start time and end time, up to seven days ago for the specified source.
     * @param {module:model/String} source The specific source of the data being requested.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate The start date for the data being requested.
     * @param {String} opts.startTime The start time for the data being requested.
     * @param {Date} opts.endDate The end date for the data being requested.
     * @param {String} opts.endTime The end time for the data being requested.
     * @param {module:model/String} opts.timezone The timezone the start and end date/times use. (default to UTC)
     * @param {Number} opts.pageSize The maximum number of results to return per page. (default to 100)
     * @param {Boolean} opts.darkpoolOnly Set to true to show only darkpool trades (default to false)
     * @param {Number} opts.minSize Trades must be larger or equal to this size.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecurityTradesResult}
     */
    this.getSecurityTrades = function(source, opts) {
      return this.getSecurityTradesWithHttpInfo(source, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Security Trades By Symbol
     * Returns all trades for a symbol between start time and end time, up to seven days ago for the specified source.
     * @param {String} identifier The ticker symbol for which trades are being requested.
     * @param {module:model/String} source The specific source of the data being requested.  Specifying delayed sip will result in the system automatically determining which delayed sip source (cta_delayed, cta_b_delayed, utp_delayed) to use.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate The start date for the data being requested.
     * @param {String} opts.startTime The start time for the data being requested.
     * @param {Date} opts.endDate The end date for the data being requested.
     * @param {String} opts.endTime The end time for the data being requested.
     * @param {module:model/String} opts.timezone The timezone the start and end date/times use. (default to UTC)
     * @param {Boolean} opts.darkpoolOnly Set to true to show only darkpool trades (default to false)
     * @param {Number} opts.pageSize The maximum number of results to return per page. (default to 100)
     * @param {Number} opts.minSize Trades must be larger or equal to this size.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityTradesResult} and HTTP response
     */
    this.getSecurityTradesBySymbolWithHttpInfo = function(identifier, source, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityTradesBySymbol");
      }

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getSecurityTradesBySymbol");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'source': source,
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'timezone': opts['timezone'],
        'darkpool_only': opts['darkpoolOnly'],
        'page_size': opts['pageSize'],
        'min_size': opts['minSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SecurityTradesResult;
      var endpoint = '/securities/{identifier}/trades'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Security Trades By Symbol
     * Returns all trades for a symbol between start time and end time, up to seven days ago for the specified source.
     * @param {String} identifier The ticker symbol for which trades are being requested.
     * @param {module:model/String} source The specific source of the data being requested.  Specifying delayed sip will result in the system automatically determining which delayed sip source (cta_delayed, cta_b_delayed, utp_delayed) to use.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate The start date for the data being requested.
     * @param {String} opts.startTime The start time for the data being requested.
     * @param {Date} opts.endDate The end date for the data being requested.
     * @param {String} opts.endTime The end time for the data being requested.
     * @param {module:model/String} opts.timezone The timezone the start and end date/times use. (default to UTC)
     * @param {Boolean} opts.darkpoolOnly Set to true to show only darkpool trades (default to false)
     * @param {Number} opts.pageSize The maximum number of results to return per page. (default to 100)
     * @param {Number} opts.minSize Trades must be larger or equal to this size.
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecurityTradesResult}
     */
    this.getSecurityTradesBySymbol = function(identifier, source, opts) {
      return this.getSecurityTradesBySymbolWithHttpInfo(identifier, source, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks Analyst Ratings for Security
     * This database offers consensus analyst recommendations for over 5,000 US and Canadian listed companies.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Limit ratings to those on or after this date
     * @param {String} opts.endDate Limit ratings to those on or before this date
     * @param {Number} opts.meanGreater Return only records with a mean (average) higher than this value
     * @param {Number} opts.meanLess Return only records with a mean (average) lower than this value
     * @param {Number} opts.strongBuysGreater Return only records with more than this many Strong Buy recommendations
     * @param {Number} opts.strongBuysLess Return only records with fewer than this many Strong Buy recommendations
     * @param {Number} opts.buysGreater Return only records with more than this many Buy recommendations
     * @param {Number} opts.buysLess Return only records with fewer than this many Buy recommendations
     * @param {Number} opts.holdsGreater Return only records with more than this many Hold recommendations
     * @param {Number} opts.holdsLess Return only records with fewer than this many Hold recommendations
     * @param {Number} opts.sellsGreater Return only records with more than this many Sell recommendations
     * @param {Number} opts.sellsLess Return only records with fewer than this many Sell recommendations
     * @param {Number} opts.strongSellsGreater Return only records with more than this many Strong Sell recommendations
     * @param {Number} opts.strongSellsLess Return only records with fewer than this many Strong Sell recommendations
     * @param {Number} opts.totalGreater Return only records with more than this many recommendations, regardless of type
     * @param {Number} opts.totalLess Return only records with fewer than this many recommendations, regardless of type
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityZacksAnalystRatings} and HTTP response
     */
    this.getSecurityZacksAnalystRatingsWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityZacksAnalystRatings");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'mean_greater': opts['meanGreater'],
        'mean_less': opts['meanLess'],
        'strong_buys_greater': opts['strongBuysGreater'],
        'strong_buys_less': opts['strongBuysLess'],
        'buys_greater': opts['buysGreater'],
        'buys_less': opts['buysLess'],
        'holds_greater': opts['holdsGreater'],
        'holds_less': opts['holdsLess'],
        'sells_greater': opts['sellsGreater'],
        'sells_less': opts['sellsLess'],
        'strong_sells_greater': opts['strongSellsGreater'],
        'strong_sells_less': opts['strongSellsLess'],
        'total_greater': opts['totalGreater'],
        'total_less': opts['totalLess'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityZacksAnalystRatings;
      var endpoint = '/securities/{identifier}/zacks/analyst_ratings'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks Analyst Ratings for Security
     * This database offers consensus analyst recommendations for over 5,000 US and Canadian listed companies.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Limit ratings to those on or after this date
     * @param {String} opts.endDate Limit ratings to those on or before this date
     * @param {Number} opts.meanGreater Return only records with a mean (average) higher than this value
     * @param {Number} opts.meanLess Return only records with a mean (average) lower than this value
     * @param {Number} opts.strongBuysGreater Return only records with more than this many Strong Buy recommendations
     * @param {Number} opts.strongBuysLess Return only records with fewer than this many Strong Buy recommendations
     * @param {Number} opts.buysGreater Return only records with more than this many Buy recommendations
     * @param {Number} opts.buysLess Return only records with fewer than this many Buy recommendations
     * @param {Number} opts.holdsGreater Return only records with more than this many Hold recommendations
     * @param {Number} opts.holdsLess Return only records with fewer than this many Hold recommendations
     * @param {Number} opts.sellsGreater Return only records with more than this many Sell recommendations
     * @param {Number} opts.sellsLess Return only records with fewer than this many Sell recommendations
     * @param {Number} opts.strongSellsGreater Return only records with more than this many Strong Sell recommendations
     * @param {Number} opts.strongSellsLess Return only records with fewer than this many Strong Sell recommendations
     * @param {Number} opts.totalGreater Return only records with more than this many recommendations, regardless of type
     * @param {Number} opts.totalLess Return only records with fewer than this many recommendations, regardless of type
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityZacksAnalystRatings}
     */
    this.getSecurityZacksAnalystRatings = function(identifier, opts) {
      return this.getSecurityZacksAnalystRatingsWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks Analyst Ratings Snapshot
     * This database offers current and historical consensus analyst recommendation snapshots for over 5,000 US and Canadian listed companies.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.date Lookup a historical snapshot on the given date
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityZacksAnalystRatingsSnapshot} and HTTP response
     */
    this.getSecurityZacksAnalystRatingsSnapshotWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityZacksAnalystRatingsSnapshot");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'date': opts['date'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityZacksAnalystRatingsSnapshot;
      var endpoint = '/securities/{identifier}/zacks/analyst_ratings/snapshot'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks Analyst Ratings Snapshot
     * This database offers current and historical consensus analyst recommendation snapshots for over 5,000 US and Canadian listed companies.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.date Lookup a historical snapshot on the given date
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityZacksAnalystRatingsSnapshot}
     */
    this.getSecurityZacksAnalystRatingsSnapshot = function(identifier, opts) {
      return this.getSecurityZacksAnalystRatingsSnapshotWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks EPS Surprises for Security
     * Returns historical estimated and actual earnings, guidance, and announcement dates for a specified symbol.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityZacksEPSSurprises} and HTTP response
     */
    this.getSecurityZacksEpsSurprisesWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityZacksEpsSurprises");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityZacksEPSSurprises;
      var endpoint = '/securities/{identifier}/zacks/eps_surprises'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks EPS Surprises for Security
     * Returns historical estimated and actual earnings, guidance, and announcement dates for a specified symbol.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityZacksEPSSurprises}
     */
    this.getSecurityZacksEpsSurprises = function(identifier, opts) {
      return this.getSecurityZacksEpsSurprisesWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Zacks Sales Surprises for Security
     * This database returns historical estimated and actual sales, guidance, and announcement dates for a specified US or Canadian company.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityZacksSalesSurprises} and HTTP response
     */
    this.getSecurityZacksSalesSurprisesWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityZacksSalesSurprises");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityZacksSalesSurprises;
      var endpoint = '/securities/{identifier}/zacks/sales_surprises'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Zacks Sales Surprises for Security
     * This database returns historical estimated and actual sales, guidance, and announcement dates for a specified US or Canadian company.
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityZacksSalesSurprises}
     */
    this.getSecurityZacksSalesSurprises = function(identifier, opts) {
      return this.getSecurityZacksSalesSurprisesWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Screen Securities
     * Screen Securities using complex logic. Use POST only. See &lt;a href&#x3D;\&quot;https://docs.intrinio.com/documentation/screener_v2\&quot; target&#x3D;\&quot;_blank\&quot;&gt;screener documentation&lt;/a&gt; for details on how to construct conditions.
     * @param {Object} opts Optional parameters
     * @param {module:model/SecurityScreenGroup} opts.logic The logic to screen with, consisting of operators, clauses, and nested groups. &lt;/br&gt; See &lt;a href&#x3D;\&quot;https://docs.intrinio.com/documentation/screener_v2\&quot; target&#x3D;\&quot;_blank\&quot;&gt;screener documentation&lt;/a&gt; for details on how to construct conditions.
     * @param {String} opts.orderColumn Results returned sorted by this column
     * @param {module:model/String} opts.orderDirection Sort order to use with the order_column (default to asc)
     * @param {Boolean} opts.primaryOnly Return only primary securities (default to false)
     * @param {Number} opts.pageSize The number of results to return. Maximum for this endpoint is 50000. (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SecurityScreenResult>} and HTTP response
     */
    this.screenSecuritiesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['logic'];


      var pathParams = {
      };
      var queryParams = {
        'order_column': opts['orderColumn'],
        'order_direction': opts['orderDirection'],
        'primary_only': opts['primaryOnly'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SecurityScreenResult];
      var endpoint = '/securities/screen'
      var method = 'POST'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Screen Securities
     * Screen Securities using complex logic. Use POST only. See &lt;a href&#x3D;\&quot;https://docs.intrinio.com/documentation/screener_v2\&quot; target&#x3D;\&quot;_blank\&quot;&gt;screener documentation&lt;/a&gt; for details on how to construct conditions.
     * @param {Object} opts Optional parameters
     * @param {module:model/SecurityScreenGroup} opts.logic The logic to screen with, consisting of operators, clauses, and nested groups. &lt;/br&gt; See &lt;a href&#x3D;\&quot;https://docs.intrinio.com/documentation/screener_v2\&quot; target&#x3D;\&quot;_blank\&quot;&gt;screener documentation&lt;/a&gt; for details on how to construct conditions.
     * @param {String} opts.orderColumn Results returned sorted by this column
     * @param {module:model/String} opts.orderDirection Sort order to use with the order_column (default to asc)
     * @param {Boolean} opts.primaryOnly Return only primary securities (default to false)
     * @param {Number} opts.pageSize The number of results to return. Maximum for this endpoint is 50000. (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SecurityScreenResult>}
     */
    this.screenSecurities = function(opts) {
      return this.screenSecuritiesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }



    /**
     * Search Securities
     * Search the securities database and return a list of securities matching the text query parameter passed through. Query parameter searches across the security ticker and name.
     * @param {String} query 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecuritiesSearch} and HTTP response
     */
    this.searchSecuritiesWithHttpInfo = function(query, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchSecurities");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': query,
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecuritiesSearch;
      var endpoint = '/securities/search'
      var method = 'GET'

      let requestParameters = { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType }
      
      return this.makeApiCall(requestParameters)
    }

    /**
     * Search Securities
     * Search the securities database and return a list of securities matching the text query parameter passed through. Query parameter searches across the security ticker and name.
     * @param {String} query 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The number of results to return (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecuritiesSearch}
     */
    this.searchSecurities = function(query, opts) {
      return this.searchSecuritiesWithHttpInfo(query, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    this.makeApiCall = function(parameters) {
      const retry = require('async-retry')
      
      const { endpoint, method, pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType } = parameters;
      
      async function makeApiRequest(intrinioSDK) {
        let response = intrinioSDK.apiClient.callApi(
          endpoint, method,
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType
        );
        return response
      }
      
      var retryAmount = 0;
      if (this.apiClient.enableRetries == true) {
        retryAmount = 5;
      }
      
      return retry((bail, attempt) => {
          return new Promise((resolve, reject) => {
            var req = makeApiRequest(this, bail);
            
            req.then((response) => {
              resolve(response);
            })
            .catch((error) => {
              // OpenAPI parses the "less than" sign uniquely. Logic below is alternate logic to remedy this.
              var isClientError = error.status >= 400 && !(error.status >= 500);
              
              // Check for rate limit header. Bail if it is greater than the max allotted retry, otherwise run a loop until the rate limit resets 
              // Do not retry on all other 400 errors
              if (error.status == 429) {
                var rateLimitMilliSeconds = error.response.headers['retry-after'] * 1000;
                
                if (rateLimitMilliSeconds > MAX_RETRY_MILLISECONDS) {
                  resolve(bail(error));
                }
                
                setTimeout(() => {
                  reject(error);
                }, rateLimitMilliSeconds);
              } else if (isClientError) {
                resolve(bail(error));
              } else {
                reject(error);
              }
            });
            
          })
      }, {
        minTimeout: 1000,
        maxTimeout: MAX_RETRY_MILLISECONDS,
        randomize: true,
        retries: retryAmount,
        factor: 1
      }).then((response) => {
        return response;
      })
    }
  };
  
  return exports;
}));
